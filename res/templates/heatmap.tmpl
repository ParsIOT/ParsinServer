<!DOCTYPE html>
<html>

<head>
	<meta charset=utf-8/>
	<title>PARSIN</title>
	<link rel="shortcut icon" sizes="16x16 24x24 32x32 48x48 64x64" href="/static/img/favicon.ico"/>
	<meta name='viewport' content='initial-scale=1,maximum-scale=1,user-scalable=no'/>
	<!-- Bootstrap Core CSS -->
	<link href="/static/css/bootstrap.min.css" rel="stylesheet">
	<!-- Custom CSS -->
	<link href="/static/css/2-col-portfolio.css" rel="stylesheet">
	<link href="/static/css/custom.css" rel="stylesheet">
	<link href="/static/css/leaflet.css" rel="stylesheet">
	<link href="/static/css/leaflet.usermarker.css" rel="stylesheet">

	<!--
	<link href="/static/css/plugins/leaflet/heatmap/commons.css" rel="stylesheet">
	<link href="/static/css/plugins/leaflet/heatmap/prism.css" rel="stylesheet">  -->
	<link rel="stylesheet" type="text/css" href="/static/css/sweetalert.css">
	<!-- Font Awesome CSS -->
	<link rel="stylesheet" href="/static/css/font-awesome.min.css">
	<style>
		#live-map {
			height: 500px;
		}

		#locations-table-container {
			overflow: scroll;
		}
	</style>
</head>

<body>

{{ template "navbar" . }}

<!-- Page Content -->
<div class="container-fluid">

	<div class="row">
		<div class="col-lg-12">
			<h2 class="page-header">Trace Route Map
				<small>view users tracking history on map</small>
			</h2>
		</div>
	</div>

	<!--<div class="well">-->
	<div class="row">
		<div class="col-md-9 col-sm-12">
			<div class="panel panel-primary" id="map-panel">
				<div class="panel-heading">
					Map
				</div>
				<div class="panel-body">
					<div id="live-map"></div>

				</div>
			</div>
		</div>
		<div class="col-md-3 col-sm-12">
			<div class="panel panel-success" id="users-list-panel">
				<div class="panel-heading">
					Users
				</div>
				<div class="panel-body" id="locations-table-container">
					<div class="bs-callout bs-callout-info row" style="margin: 0 0 15px;">
						<div class="col-md-12">
							<a href="#location" data-toggle="collapse"><h4 style="text-decoration: underline;">
								Select Location</h4></a>
							<div id="location" class="collapse in">
								<div class="form-group">
									<label for="refresh-interval">Enter location</label>
									<input id="locName" class="form-control" placeholder="Location Num"/>
								</div>
								<div class="form-group">
									<label for="refresh-interval">Enter MaxFPDist(0 to 50.0)</label>
									<input id="maxFPDist" class="form-control" placeholder="Max RSS Vector distance"
									       value="5"/>
								</div>
								<div class="col-md-12">
									<div class="form-group">
										<button id="get-similar-fp" onclick="getFPAmbiguity()"
										        class="btn btn-success btn-block">
											Get similar FP
										</button>
										<button id="resetMapBtn" onclick="getMapLocations()"
										        class="btn btn-warning btn-block">
											Reset Map
										</button>
									</div>
								</div>
							</div>
						</div>
					</div>
					<table id="locations-table"
					       class="table table-responsive table-hover table-condensed table-bordered">
						<thead>
						<tr>
							<td>Location</td>
							<td>Num</td>
						</tr>
						</thead>
					</table>
					<h4 id="show-details-link" class="text-center"/>
				</div>
			</div>
		</div>
	</div>
	<!--</div>-->


</div>

<!-- Bootstrap and JQuery JS -->
<script src="/static/js/jquery-2.0.0.min.js"></script>
<script src='/static/js/bootstrap.js'></script>
<script src='/static/js/leaflet.js'></script>
<!-- <script src="/static/js/heatmap.js"></script> -->
<!-- leaflet heatmap JS -->
<!-- <script src="/static/js/leaflet-heatmap.js"></script>
<script src="/static/js/plugins/leaflet/heatmap/prism.js"></script>  -->


<script src='/static/js/leaflet.usermarker.js'></script>
<script src='/static/js/Leaflet.Marker.SlideTo.js'></script>
<script src="/static/js/sweetalert.min.js"></script>
<script src="/static/js/d3.min.js"></script>
<script src="/static/js/d3.tip.v0.6.3.js"></script>
<script src="/static/js/plugins/leaflet/heatmap/leaflet-heat.js"></script>
<script src="/static/js/plugins/leaflet/heatmap/HeatLayer.js"></script>
<script type="application/javascript">
	var filter_user = false;
	var reloadDataInterval;

/*	//komeil: heatmap
	var testData = {
		max: 8,
		data: [{lat: 24.6408, lng: 46.7728, count: 3}, {lat: 50.75, lng: -1.55, count: 1}]
	};
	var cfg = {
		// radius should be small ONLY if scaleRadius is true (or small radius is intended)
		// if scaleRadius is false it will be the constant radius used in pixels
		"radius": 2,
		"maxOpacity": .8,
		// scales the radius based on map zoom
		"scaleRadius": true,
		// if set to false the heatmap uses the global maximum for colorization
		// if activated: uses the data maximum within the current map boundaries
		//   (there will always be a red spot with useLocalExtremas true)
		"useLocalExtrema": true,
		// which field name in your data represents the latitude - default "lat"
		latField: 'lat',
		// which field name in your data represents the longitude - default "lng"
		lngField: 'lng',
		// which field name in your data represents the data value - default "value"
		valueField: 'count'
	};
	var heatmapLayer = new HeatmapOverlay(cfg);

	//end of heatmap*/

	$('#live-map').css('height', $(window.top).height() - 275);
	$('#locations-table-container').css('height', $(window.top).height() - 245);
	var map = L.map('live-map', {
		crs: L.CRS.Simple,
		minZoom: -100,
//        maxZoom: 4
		//layers: [baseLayer, heatmapLayer] //heatmap
	});
	var bounds = [[-1 * ('{{.MapHeight}}' / 2), -1 * ('{{.MapWidth}}' / 2)], [('{{.MapHeight}}' / 2), ('{{.MapWidth}}' / 2)]];
	//    var bounds = [[-400, -300], [400, 300]];
	var image = L.imageOverlay('{{.MapPath}}', bounds).addTo(map);
	map.setView([0, 0], -2);

	//heatmapLayer.setData(testData); // heatmap
	var heat = L.heatLayer([
		[50.5, 30.5, 0.25], // lat, lng, intensity
		[50.6, 30.4, 0.25],
		[50.6, 30.4, 50.25],
		[50.6, 30.4, 10.25],
		[50.6, 30.4, 10.25],
		[50.6, 30.4, 10.25],
		[50.6, 30.4, 10.25],
		[50.6, 30.4, 10.25],
		[50.6, 30.4, 10.25],
		[50.6, 30.4, 10.25],
		[50.6, 30.4, 10.25],
		[50.6, 30.4, 10.25],
		[50.6, 30.4, 10.25],

	], {radius: 100}).addTo(map);
	//map.addLayer(heat);

	lineLayer = L.featureGroup();
	map.addLayer(lineLayer);
	locationMarkers = L.featureGroup();
	var markers = {};
	var markersLoc = {};
	var pattern = /([\d.-]*)[\s]*,[\s]*([\d.-]*)/;

	//    var marker = L.userMarker([0, 0], {pulsing: true, accuracy: 100, smallIcon: true});
	//    marker.addTo(map);
	getMapLocations();

	// UpdateTraceMap();

	function Line(p1x, p1y, p2x, p2y) {

		// return p1 * p2;
		// console.log(p1x,",", p1y,",", p2x,",", p2y)
		var pointA = new L.LatLng(p1x, p1y);
		var pointB = new L.LatLng(p2x, p2y);
		var pointList = [pointA, pointB];


		var line = new L.Polyline(pointList, {
			color: 'blue',
			weight: 10,
			opacity: 0.5,
			smoothFactor: 1,
			// symbol: L.Symbol.arrowHead({pixelSize: 15, polygon: false, pathOptions: {stroke: true}})
		});
		line.addTo(lineLayer);
	}

	function getMapLocations() {
		/*console.group("remove") // just for testing the pattern of markers
		console.log(markers)
		console.groupEnd()*/
		for (var marker in markers) {  // delete fingerprint locations from map
			map.removeLayer(markers[marker]);
		}

		markers = {};

		$.getJSON("/locations?group={{ .Group }}", function (data) {
			// var items = [];

			$.each(data.locations, function (key, val) {
				let match = pattern.exec(key);
				if (match) {
					// items.push("<tr><td>" + match[1] + "</td><td>" + match[2] + "</td><td>" + val.accuracy + "</td><td>" + val.count + "</td></tr>");

					var heat = L.heatLayer([ // heat map test
						[match[1], match[2], 0.2], // lat, lng, intensity
						[match[1]+10, match[2]+10, 0.25],
					], {radius: 50}, {0.1: 'blue', 0.2: 'lime', 0.25: 'red'}).addTo(map);

					L.userMarker([match[1], match[2]], {
//                    pulsing: true,
//                    accuracy: 200,
						title: key,
						smallIcon: true
					}).bindPopup("<b>" + match[1] + "," + match[2] + "</b>").addTo(locationMarkers);
				}
			});
			locationMarkers.addTo(map);
			locationMarkers.eachLayer(function (marker) {
				marker.on('click', function (e) {
					$('#locName').val((e.target.getLatLng().lat).toString() + ".0" + "," + (e.target.getLatLng().lng).toString() + ".0");
					UpdateTraceMap();
				});

			});
		});
	}

	function UpdateTraceMap() {
		map.removeLayer(locationMarkers);

		locName = $('#locName').val();
		maxFPDist = $('#maxFPDist').val();

		let mainLoc = pattern.exec(locName);
		addMainMarker(mainLoc);

		var items = [];

		$.getJSON("/fingerprintLikeness?group={{ .Group }}&location=" + locName + "&maxFPDist=" + maxFPDist, function (data) {
			// console.log(data.users[user])
			if (data.success == true) {
				let count = 1;
				if (data.resultMap) {
					$.each(data.resultMap, function (location, fingerprints) {
						let match = pattern.exec(location);
						if (match && match[1] && match[2]) {
							items.push("<tr class='bg-info'><td>" + location + "</td><td>" + fingerprints.length + "</td></tr>");
							// console.log(match)
							createMarker(count, match, fingerprints);
							// markers[key]=match;
						} else {
							items.push("<tr class='bg-info'><td>" + location + "</td><td colspan='2' class='text-center'> NO DATA </td></tr>");
						}
						count++;
					});
				}


				$("#locations-table").find("tbody").remove();
				console.log(items);
				$("<tbody/>", {
					"class": "tab-content",
					html: items.join("")
				}).appendTo("#locations-table");

				$("#show-details-link").find("a").remove();//remove show rss details link
				$("<a/>", {
					"target": "_blank",
					"onclick": "window.open('" + "/fingerprintLikeness?group={{ .Group }}&location=" + locName + "&maxFPDist=" + maxFPDist + "','pagename','resizable,height=420,width=1000'); return false;",
					html: "See Rss details"
				}).appendTo("#show-details-link");
			}

			$('#resetMapBtn').prop("disabled", false)
			$('#get-similar-fp').prop("disabled", false)
		});
	}

	function getFPAmbiguity() {
		// console.log(user,n);
		for (var marker in markers) {
			// if (marker != filter_user) {
			//     console.log(marker);
			map.removeLayer(markers[marker]);
			// Remove lines
			// map.removeLayer(lineLayer);
		}
		$('#resetMapBtn').attr('disabled', "")
		$('#get-similar-fp').attr('disabled', "")
		markers = {};
		UpdateTraceMap()
	}


	function createMarker(key, match, message) {

		markers[key] = L.marker([match[1], match[2]], {
//                    pulsing: true,
//                    accuracy: 200,
			title: match[0] + " : " + message.length,
			smallIcon: true
		}).bindPopup(match[0] + " : " + message.length).addTo(map);

	}

	function addMainMarker(match) {

		markers[-1] = L.userMarker([match[1], match[2]], {
//                    pulsing: true,
//                    accuracy: 200,
			title: match[0],
			smallIcon: true
		}).bindPopup(match[0]).addTo(map);

	}
</script>

</body>

</html>
