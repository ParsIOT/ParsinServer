<!DOCTYPE html>
<html>

<head>
    <meta charset=utf-8/>
    <title>PARSIN</title>
    <link rel="shortcut icon" sizes="16x16 24x24 32x32 48x48 64x64" href="/static/img/favicon.ico"/>
    <meta name='viewport' content='initial-scale=1,maximum-scale=1,user-scalable=no'/>

    <!-- Bootstrap and JQuery JS -->
    <script src="/static/js/jquery-2.0.0.min.js"></script>
    <script src='/static/js/bootstrap.js'></script>

    <!-- Bootstrap Core CSS -->
    <link href="/static/css/bootstrap.min.css" rel="stylesheet">

    <!-- Custom CSS -->
    <link href="/static/css/2-col-portfolio.css" rel="stylesheet">
    <link href="/static/css/custom.css" rel="stylesheet">


    <link href="/static/css/leaflet.css" rel="stylesheet">
    <link href="/static/css/leaflet.usermarker.css" rel="stylesheet">
    <script src='/static/js/leaflet.js'></script>
    <script src='/static/js/leaflet.usermarker.js'></script>
    <script src='/static/js/Leaflet.Marker.SlideTo.js'></script>

    <script src="/static/js/sweetalert.min.js"></script>
    <script src="/static/js/d3.min.js"></script>
    <script src="/static/js/d3.tip.v0.6.3.js"></script>
    <link rel="stylesheet" type="text/css" href="/static/css/sweetalert.css">

    <!-- Font Awesome CSS -->
    <link rel="stylesheet" href="/static/css/font-awesome.min.css">
    <style>
        #live-map {
            height: 500px;
        }

        #locations-table-container {
            overflow: scroll;
        }
    </style>
</head>

<body>

{{ template "navbar" . }}

<!-- Page Content -->
<div class="container-fluid">

    <div class="row">
        <div class="col-lg-12">
            <h2 class="page-header">Trace Route Map
                <small>view users tracking history on map</small>
            </h2>
        </div>
    </div>

    <!--<div class="well">-->
    <div class="row">
        <div class="col-md-9 col-sm-12">
            <div class="panel panel-primary" id="map-panel">
                <div class="panel-heading">
                    Map
                </div>
                <div class="panel-body">
                    <div id="live-map"></div>

                </div>
            </div>
        </div>
        <div class="col-md-3 col-sm-12">
            <div class="panel panel-success" id="users-list-panel">
                <div class="panel-heading">
                    Users
                </div>
                <div class="panel-body" id="locations-table-container">
                    <div class="bs-callout bs-callout-info row" style="margin: 0 0 15px;">
                        <div class="col-md-12">
                            <a href="#location" data-toggle="collapse"><h4 style="text-decoration: underline;">
                                Select Location</h4></a>
                            <div id="location" class="collapse in">
                                <div class="form-group">
                                    <label for="refresh-interval">Enter location</label>
                                    <input id="locName" class="form-control" placeholder="Location Num"/>
                                </div>
                                <div class="form-group">
                                    <label for="refresh-interval">Enter MaxFPDist(0 to 50.0)</label>
                                    <input id="maxFPDist" class="form-control" placeholder="Max RSS Vector distance"/>
                                </div>
                                <div class="col-md-12">
                                    <div class="form-group">
                                        <button onclick="getFPAmbiguity()" class="btn btn-success btn-block">
                                            Get similar FP
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <table id="locations-table"
                           class="table table-responsive table-hover table-condensed table-bordered">
                        <thead>
                        <tr>
                            <td>Location</td>
                            <td>Num</td>
                        </tr>
                        </thead>
                    </table>
                    <h4 id="show-details-link" class="text-center"/>
                </div>
            </div>
        </div>
    </div>
    <!--</div>-->


</div>

<script type="application/javascript">
    var filter_user = false;
    var reloadDataInterval;

    $('#live-map').css('height', $(window.top).height() - 275);
    $('#locations-table-container').css('height', $(window.top).height() - 245);
    var map = L.map('live-map', {
        crs: L.CRS.Simple,
        minZoom: -100,
//        maxZoom: 4
    });
    var bounds = [[-1700, -1800], [1700, 1800]];
    //    var bounds = [[-400, -300], [400, 300]];
    var image = L.imageOverlay('/static/img/MapFull.png', bounds).addTo(map);
    map.setView([0, 0], -2);

    lineLayer = L.featureGroup();
    map.addLayer(lineLayer);

    var markers = {};
    var markersLoc = {};
    var pattern = /([\d.-]*)[\s]*,[\s]*([\d.-]*)/;

    //    var marker = L.userMarker([0, 0], {pulsing: true, accuracy: 100, smallIcon: true});
    //    marker.addTo(map);

    UpdateTraceMap();

    function Line(p1x, p1y, p2x, p2y) {

        // return p1 * p2;
        // console.log(p1x,",", p1y,",", p2x,",", p2y)
        var pointA = new L.LatLng(p1x, p1y);
        var pointB = new L.LatLng(p2x, p2y);
        var pointList = [pointA, pointB];


        var line = new L.Polyline(pointList, {
            color: 'blue',
            weight: 10,
            opacity: 0.5,
            smoothFactor: 1,
            // symbol: L.Symbol.arrowHead({pixelSize: 15, polygon: false, pathOptions: {stroke: true}})
        });
        line.addTo(lineLayer);
    }

    function UpdateTraceMap() {


        locName = $('#locName').val();
        maxFPDist = $('#maxFPDist').val();

        let mainLoc = pattern.exec(locName);
        addMainMarker(mainLoc);

        var items = [];

        $.getJSON("/fingerprintLikeness?group={{ .Group }}&location=" + locName + "&maxFPDist=" + maxFPDist, function (data) {
            // console.log(data.users[user])

            let count = 1;
            $.each(data.resultMap, function (location, fingerprints) {
                let match = pattern.exec(location);
                if (match && match[1] && match[2]) {
                    items.push("<tr class='bg-info'><td>" + location + "</td><td>" + fingerprints.length + "</td></tr>");
                    // console.log(match)
                    createMarker(count, match, fingerprints);
                    // markers[key]=match;
                } else {
                    items.push("<tr class='bg-info'><td>" + location + "</td><td colspan='2' class='text-center'> NO DATA </td></tr>");
                }
                count++;
            });

            $("#locations-table").find("tbody").remove();
            console.log(items);
            $("<tbody/>", {
                "class": "tab-content",
                html: items.join("")
            }).appendTo("#locations-table");

            $("#show-details-link").find("a").remove();//remove show rss details link
            $("<a/>", {
                "target": "_blank",
                "onclick": "window.open('" + "/fingerprintLikeness?group={{ .Group }}&location=" + locName + "&maxFPDist=" + maxFPDist + "','pagename','resizable,height=420,width=1000'); return false;",
                html: "See Rss details"
            }).appendTo("#show-details-link");
        });
    }

    function getFPAmbiguity() {
        // console.log(user,n);
        for (var marker in markers) {
            // if (marker != filter_user) {
            //     console.log(marker);
            map.removeLayer(markers[marker]);
            // Remove lines
            // map.removeLayer(lineLayer);
        }

        markers = {};
        UpdateTraceMap();
    }


    function createMarker(key, match, message) {

        markers[key] = L.marker([match[1], match[2]], {
//                    pulsing: true,
//                    accuracy: 200,
            title: match[0] + " : " + message.length,
            smallIcon: true
        }).bindPopup(match[0] + " : " + message.length).addTo(map);

    }

    function addMainMarker(match) {

        markers[-1] = L.userMarker([match[1], match[2]], {
//                    pulsing: true,
//                    accuracy: 200,
            title: match[0],
            smallIcon: true
        }).bindPopup(match[0]).addTo(map);

    }
</script>
</body>

</html>
