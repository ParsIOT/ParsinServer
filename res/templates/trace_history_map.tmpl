<!DOCTYPE html>
<html>

<head>
    <meta charset=utf-8/>
    <title>PARSIN</title>
    <link rel="shortcut icon" sizes="16x16 24x24 32x32 48x48 64x64" href="/static/img/favicon.ico"/>
    <meta name='viewport' content='initial-scale=1,maximum-scale=1,user-scalable=no'/>

    <!-- Bootstrap and JQuery JS -->
    <script src="/static/js/jquery-2.0.0.min.js"></script>
    <script src='/static/js/bootstrap.js'></script>

    <!-- Bootstrap Core CSS -->
    <link href="/static/css/bootstrap.min.css" rel="stylesheet">

    <!-- Custom CSS -->
    <link href="/static/css/2-col-portfolio.css" rel="stylesheet">
    <link href="/static/css/custom.css" rel="stylesheet">


    <link href="/static/css/leaflet.css" rel="stylesheet">
    <link href="/static/css/leaflet.usermarker.css" rel="stylesheet">
    <script src='/static/js/leaflet.js'></script>
    <script src='/static/js/leaflet.usermarker.js'></script>
    <script src='/static/js/Leaflet.Marker.SlideTo.js'></script>

    <!-- Font Awesome CSS -->
    <link rel="stylesheet" href="/static/css/font-awesome.min.css">
    <style>
        #live-map {
            height: 500px;
        }

        #users-table-container {
            overflow: scroll;
        }
    </style>
</head>

<body>

{{ template "navbar" . }}

<!-- Page Content -->
<div class="container-fluid">

    <div class="row">
        <div class="col-lg-12">
            <h2 class="page-header">Trace Route Map
                <small>view users tracking history on map</small>
            </h2>
        </div>
    </div>

    <!--<div class="well">-->
    <div class="row">
        <div class="col-md-9 col-sm-12">
            <div class="panel panel-primary" id="map-panel">
                <div class="panel-heading">
                    Map
                </div>
                <div class="panel-body">
                    <div id="live-map"></div>

                </div>
            </div>
        </div>
        <div class="col-md-3 col-sm-12">
            <div class="panel panel-success" id="users-list-panel">
                <div class="panel-heading">
                    Users
                </div>
                <div class="panel-body" id="users-table-container">
                    <div class="bs-callout bs-callout-info row" style="margin: 0 0 15px;">
                        <div class="col-md-12">
                            <a href="#filter-users" data-toggle="collapse"><h4 style="text-decoration: underline;">
                                Filter Users</h4></a>
                            <div id="filter-users" class="collapse">
                                <div class="form-group">
                                    <label for="refresh-interval">Enter user to filter</label>
                                    <input id="user" class="form-control" placeholder="user to filter"/>
                                </div>
                                <div class="form-group">
                                    <label for="refresh-interval">Enter N</label>
                                    <input id="n" class="form-control" placeholder="num of history track"/>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <button onclick="userTrace()" class="btn btn-success btn-sm btn-block">
                                            GetTrace
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <table id="users-table"
                           class="table table-responsive table-hover table-condensed table-bordered">
                        <thead>
                        <tr>
                            <td>Key</td>
                            <td>X</td>
                            <td>Y</td>
                        </tr>
                        </thead>
                    </table>
                </div>
            </div>
        </div>
    </div>
    <!--</div>-->


</div>

<script type="application/javascript">
    var filter_user = false;
    var reloadDataInterval;
    $('#live-map').css('height', $(window.top).height() - 275);
    $('#users-table-container').css('height', $(window.top).height() - 245);
    var map = L.map('live-map', {
        crs: L.CRS.Simple,
        minZoom: -100,
//        maxZoom: 4
    });
    var bounds = [[-1700, -1800], [1700, 1800]];
    //    var bounds = [[-400, -300], [400, 300]];
    var image = L.imageOverlay('/static/img/MapFull.png', bounds).addTo(map);
    map.setView([0, 0], -2);

    lineLayer = L.featureGroup();
    map.addLayer(lineLayer);

    var markers = {};
    var markersLoc = {};
    var pattern = /([\d.-]*)[\s]*,[\s]*([\d.-]*)/;

    //    var marker = L.userMarker([0, 0], {pulsing: true, accuracy: 100, smallIcon: true});
    //    marker.addTo(map);

    UpdateTraceMap();

    function Line(p1x, p1y, p2x, p2y) {

        // return p1 * p2;
        // console.log(p1x,",", p1y,",", p2x,",", p2y)
        var pointA = new L.LatLng(p1x, p1y);
        var pointB = new L.LatLng(p2x, p2y);
        var pointList = [pointA, pointB];


        var line = new L.Polyline(pointList, {
            color: 'blue',
            weight: 10,
            opacity: 0.5,
            smoothFactor: 1,
            // symbol: L.Symbol.arrowHead({pixelSize: 15, polygon: false, pathOptions: {stroke: true}})
        });
        line.addTo(lineLayer);
    }

    function UpdateTraceMap() {
        user = $('#user').val();
        n = $('#n').val();
        var items = [];
        var locations = [];

        $.getJSON("/location?group={{ .Group }}&user=" + user + "&n=" + n, function (data) {
            // console.log(data.users[user])
            $.each(data.users[user], function (key, val) {
                // console.log(val.location)
                let match = pattern.exec(val.location);
                if (match && match[1] && match[2]) {
                    locations.push(match);
                    items.push("<tr class='bg-info'><td>" + key + "</td><td>" + match[1] + "</td><td>" + match[2] + "</td></tr>");
                    // console.log(match)
                    createMarker(key, match);
                    // markers[key]=match;
                } else {
                    items.push("<tr class='bg-info'><td>" + key + "</td><td colspan='2' class='text-center'> NO DATA </td></tr>");
                }
            });

            for (var i = 0; i < locations.length - 1; i++) {
                Line(locations[i][1], locations[i][2], locations[i + 1][1], locations[i + 1][2])
            }


            $("#users-table").find("tbody").remove();
            console.log(items);
            $("<tbody/>", {
                "class": "tab-content",
                html: items.join("")
            }).appendTo("#users-table");
        });

        // setTimeout(function () {
        //     $('.bs-callout').removeClass('bs-callout-danger').addClass('bs-callout-success')
        //     if ($('#auto-reload').is(':checked')) {
        //         resetDataLoadInterval()
        //     }
        // }, 200);
    }


    // $('#auto-reload').change(function () {
    //     if (this.checked) {
    //         $('#refresh-interval').prop('disabled', false);
    //         resetDataLoadInterval();
    //     } else {
    //         clearInterval(reloadDataInterval);
    //         $('#refresh-interval').prop('disabled', true);
    //     }
    // });

    // $('#refresh-interval').change("change", function () {
    //     resetDataLoadInterval();
    // });

    // function resetDataLoadInterval(interval = null) {
    //     clearInterval(reloadDataInterval);
    //     if (interval) {
    //         reloadDataInterval = setInterval(updateUsersLocation, interval);
    //         return
    //     }
    //     let v = parseInt($('#refresh-interval').val());
    //     let m = parseInt($('#refresh-interval').prop('min'));
    //     if (m < v) {
    //         reloadDataInterval = setInterval(updateUsersLocation, v);
    //     } else {
    //         reloadDataInterval = setInterval(updateUsersLocation, m);
    //     }
    // }

    // function filterUsers() {
    //     filter_user = $('#filter-user').val();
    //     for (var marker in markers) {
    //         if (marker != filter_user) {
    //             console.log(marker);
    //             map.removeLayer(markers[marker]);
    //             delete markers[marker];
    //         }
    //     }
    //     updateUsersLocation();
    // }

    function userTrace() {
        user = $('#user').val();
        n = $('#n').val();
        // console.log(user,n);
        for (var marker in markers) {
            // if (marker != filter_user) {
            //     console.log(marker);
            map.removeLayer(markers[marker]);
            // Remove lines
            // map.removeLayer(lineLayer);
        }
        map.removeLayer(lineLayer);
        lineLayer = L.featureGroup();
        map.addLayer(lineLayer);

        markers = {};
        markersLoc = {};
        UpdateTraceMap();
    }

    // function clearFilter() {
    //     user = false;
    //     updateUsersLocation();
    // }

    function createMarker(key, match) {
        // console.log(key)
        // console.log(match)

        // console.log(markersLoc)
        if (match in markersLoc) {
            markersLoc[match].push(key);
            markers[markersLoc[match][0]].setPopupContent(markersLoc[match].join(","));
        } else {
            markersLoc[match] = [key];
            markers[key] = L.marker([match[1], match[2]], {
//                    pulsing: true,
//                    accuracy: 200,
                title: key,
                smallIcon: true
            }).bindPopup(JSON.stringify(key)).addTo(map);
        }
    }
</script>
</body>

</html>
