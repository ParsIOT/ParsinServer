.{{ define "plot_modal" }}
    <style>
        .modal-dialog {
            overflow-y: initial !important
        }

        .modal-body {
            height: 800px;
            overflow-y: auto;
        }

    </style>
    <!-- Bootstrap Core CSS -->
    <link href="/static/css/bootstrap.min.css" rel="stylesheet">

    <!-- Custom CSS -->
    <link href="/static/css/2-col-portfolio.css" rel="stylesheet">

    <!-- Font Awesome CSS -->
    <link rel="stylesheet" href="/static/css/font-awesome.min.css">
    <script type="text/javascript" src="/static/js/canvasjs.min.js"></script>

    <div class="modal fade" id="plotModal" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-lg" style="width:90%" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div id="chartContainer">
                    </div>
                </div>
            </div>
        </div>
    </div>


    <script type="text/javascript">
        var chart;

       
        var valid_markerType = ["none", "triangle", "circle", "square", "cross"]
        var markerIndex = 0;
        var markerNum = 10;

        function clearPlot() {
            chart = undefined;
            markerIndex = 0
        }


        function loadPlot(algo, dataPoints, xAxisMaxLength=-1) {
            var yData = [];
            var xData = [];
            for (i = 0; i < dataPoints.length; i++) {
                xData.push(dataPoints[i].x);
                yData.push(dataPoints[i].y);
            }

            var setMarkerfactor = parseInt(dataPoints.length/markerNum);
            for (i = setMarkerfactor; i < dataPoints.length; i=i+setMarkerfactor) {
                dataPoints[i].markerType = valid_markerType[markerIndex];
            }

            minYData = Math.min(...yData
            )
            ;
            maxYData = Math.max(...yData
            )
            ;
            minXData = Math.min(...xData
            )
            ;
            if (xAxisMaxLength == -1){
                maxXData = Math.max(...xData
                );
            }else{
                maxXData = xAxisMaxLength;
            }

            if (chart === undefined) {


                chart = new CanvasJS.Chart("chartContainer",
                    {
                        animationEnabled: true,
                        height: 700,
                        width: 1600,
                        autosize: true,
                        zoomEnabled: true,
                        toolTip: {
                            shared: false,
                            enabled: true
                        },
                        axisY: {
                            title: "Cumulative distribution function(%)",
                            titleFontSize: 22,
                            labelFontSize: 15,
                            gridColor: "Silver",
                            tickColor: "silver",
                            minimum: minYData,
                            maximum: maxYData
                        },
                        axisX: {
                            title: "Error(cm)",
                            titleFontSize: 22,
                            labelFontSize: 15,
                            gridColor: "Silver",
                            tickColor: "silver",
                            minimum: minXData,
                            maximum: maxXData
                        },
                        // legend: {
                        //     verticalAlign: "center",
                        //     horizontalAlign: "right"
                        // },
                        data: [
                            {
                                mouseover: onMouseover,
                                mouseout: onMouseout,
                                click: onMouseclick,
                                markerType: valid_markerType[markerIndex],
                                type: "spline",
                                name: algo,
                                showInLegend: true,
                                //toolTipContent: "<a href ='/explore/{{ $.Group }}/{{ $.Network }}/{{ .Name }}'> {name}</a>",
                                markerSize: 20,
                                lineThickness: 4,
                                dataPoints: dataPoints // [{x:1, y:10}, {x:2, y=20}]
                            },

                        ],
                        legend: {
                            fontSize: 25,
                            verticalAlign: "top",
                            horizontalAlign: "center",
                            // dockInsidePlotArea: true,
                            itemclick: function (e) {
                                if (typeof (e.dataSeries.visible) === "undefined" || e.dataSeries.visible) {
                                    e.dataSeries.visible = false;
                                } else {
                                    e.dataSeries.visible = true;
                                }
                                chart.render();
                            }
                        },
                    });
            } else {
                algoExists = false;
                newData = {
                    mouseover: onMouseover,
                    mouseout: onMouseout,
                    click: onMouseclick,
                    markerType: valid_markerType[markerIndex],
                    type: "spline",
                    name: algo,
                    showInLegend: true,
                    //toolTipContent: "<a href ='/explore/{{ $.Group }}/{{ $.Network }}/{{ .Name }}'> {name}</a>",
                    markerSize: 20,
                    lineThickness: 4,
                    dataPoints: dataPoints // [{x:1, y:10}, {x:2, y=20}]
                };
                for (i in chart.options.data) {
                    if (algo === chart.options.data[i].name) {
                        chart.options.data[i] = newData;
                        algoExists = true;
                        break;
                    }
                }
                if (!algoExists) {
                    chart.options.data.push(newData);
                    if (chart.options.axisX.minimum > minXData ){
                        chart.options.axisX.minimum = minXData;
                    }
                    if (chart.options.axisX.maximum < maxXData ){
                        chart.options.axisX.maximum = maxXData;
                    }
                    if (chart.options.axisY.minimum > minYData ){
                        chart.options.axisY.minimum = minYData;
                    }
                    if (chart.options.axisY.maximum < maxYData ){
                        chart.options.axisY.maximum = maxYData;
                    }
                }
            }

            markerIndex++;
            if (markerIndex == valid_markerType.length){
                markerIndex = 0;
            }
            
            chart.render();

            function onMouseout(e) {
                chart.options.toolTip.enabled = false;
                chart.render();
            }

            function onMouseover(e) {
                document.getElementsByClassName('canvasjs-chart-tooltip')[0].style.display = 'block'; // uncomment this line to show the hidden toolTip on mouseover
                chart.options.toolTip.enabled = true;
                chart.render();
            }

            function onMouseclick(e){
                //alert(  e.dataSeries.type + ", dataPoint { x:" + e.dataPoint.x + ", y: "+ e.dataPoint.y + " }" );
	
                //chart.render();
            }
            
        }
    </script>

{{ end }}