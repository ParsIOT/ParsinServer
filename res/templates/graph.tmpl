<!DOCTYPE html>
<html>

<head>
    <meta charset=utf-8/>
    <title>PARSIN</title>
    <link rel="shortcut icon" sizes="16x16 24x24 32x32 48x48 64x64" href="/static/img/favicon.ico"/>
    <meta name='viewport' content='initial-scale=1,maximum-scale=1,user-scalable=no'/>
    <!-- Bootstrap Core CSS -->
    <link href="/static/css/bootstrap.min.css" rel="stylesheet">
    <!-- Custom CSS -->
    <link href="/static/css/2-col-portfolio.css" rel="stylesheet">
    <link href="/static/css/custom.css" rel="stylesheet">
    <link href="/static/css/leaflet.css" rel="stylesheet">
    <link href="/static/css/leaflet.usermarker.css" rel="stylesheet">
    <link href="/static/css/plugins/leaflet/leaflet.draw.css" rel="stylesheet">
    <link href="/static/css/plugins/leaflet/easy-button.css" rel="stylesheet">
    <link href="/static/css/sweetalert2.css" rel="stylesheet"/>
    <!-- Font Awesome CSS -->
    <link rel="stylesheet" href="/static/css/font-awesome.min.css">
    <style>
        #mac-filter-table-container {
            overflow: scroll;
        }
    </style>
</head>

<body>

{{ template "navbar" . }}

<!-- Page Content -->
<div class="container-fluid">

    <div class="row">
        <div class="col-lg-12">
            <h2 class="page-header">Graph
                <small>Set graphs to be used in localization</small>
            </h2>
        </div>
    </div>

    <!--<div class="well">-->
    <div class="row">


        <div class="col-md-8 col-sm-12">
            <div class="panel panel-primary" id="map-panel">
                <div class="panel-heading">
                    Map
                </div>
                <div class="panel-body">
                    <div id="graph_map"></div>
                </div>
            </div>
        </div>

        <div class="col-md-4 col-sm-12">
            <div class="panel panel-info">
                <div class="panel-heading">
                    graph List
                </div>
                <div class="panel-body">
                    <div id="controller">
                        <div class="row">
                            <div class="col-md-12">
                                <div class="bs-callout bs-callout-info" style="margin: 0 0 15px;padding-bottom: 5px;">
                                    <h4>vertex input</h4>
                                    <div class="row">
                                        <div class="col-md-3">
                                            <div class="form-group">
                                                <input id="map_point_x" type="text" disabled value="X"
                                                       class="form-control"/>
                                            </div>
                                        </div>
                                        <div class="col-md-3">
                                            <div class="form-group">
                                                <input id="map_point_y" type="text" disabled value="Y"
                                                       class="form-control"/>
                                            </div>
                                        </div>
                                        <div class="col-md-3">
                                            <button type="submit" class="btn btn-info" id="add_vertex_button"
                                                    title="Add Vertex">Add Vertex
                                            </button>
                                        </div>
                                        <div class="col-md-3">
                                            <button type="submit" class="btn btn-info" id="deleteSelected"
                                                    title="Delete selected">Delete
                                            </button>
                                        </div>


                                    </div>
                                    <div class="row">
                                        <div class="panel-body" id="mac-filter-table-container">
                                            <div>
                                                <table id="vertices_table"
                                                       class="table table-responsive table-hover table-condensed table-bordered">
                                                    <thead>
                                                    <tr>
                                                        <td>Select</td>
                                                        <td>#</td>
                                                        <td>X</td>
                                                        <td>Y</td>
                                                    </tr>
                                                    </thead>
                                                    <tbody>
                                                    </tbody>
                                                </table>
                                            </div>
                                        </div>
                                    {{/*</div>*/}}
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!--</div>-->
</div>

<!-- Bootstrap and JQuery JS -->
<script src="/static/js/jquery-2.0.0.min.js"></script>
<script src='/static/js/bootstrap.js'></script>

<script src='/static/js/leaflet.js'></script>
<script src='/static/js/leaflet.usermarker.js'></script>
<script src='/static/js/Leaflet.Marker.SlideTo.js'></script>


{{/*leaflet draw*/}}
<script src="/static/js/plugins/leaflet/leaflet.draw/Leaflet.draw.js"></script>
<script src="/static/js/plugins/leaflet/leaflet.draw/Leaflet.Draw.Event.js"></script>
<script src="/static/js/plugins/leaflet/leaflet.draw/edit/handler/Edit.Poly.js"></script>
<script src="/static/js/plugins/leaflet/leaflet.draw/edit/handler/Edit.SimpleShape.js"></script>
<script src="/static/js/plugins/leaflet/leaflet.draw/edit/handler/Edit.Rectangle.js"></script>
<script src="/static/js/plugins/leaflet/leaflet.draw/edit/handler/Edit.Marker.js"></script>
<script src="/static/js/plugins/leaflet/leaflet.draw/edit/handler/Edit.CircleMarker.js"></script>
<script src="/static/js/plugins/leaflet/leaflet.draw/edit/handler/Edit.Circle.js"></script>
<script src="/static/js/plugins/leaflet/leaflet.draw/draw/handler/Draw.Feature.js"></script>
<script src="/static/js/plugins/leaflet/leaflet.draw/draw/handler/Draw.Polyline.js"></script>
<script src="/static/js/plugins/leaflet/leaflet.draw/draw/handler/Draw.Polygon.js"></script>
<script src="/static/js/plugins/leaflet/leaflet.draw/draw/handler/Draw.SimpleShape.js"></script>
<script src="/static/js/plugins/leaflet/leaflet.draw/draw/handler/Draw.Rectangle.js"></script>
<script src="/static/js/plugins/leaflet/leaflet.draw/draw/handler/Draw.Circle.js"></script>
<script src="/static/js/plugins/leaflet/leaflet.draw/draw/handler/Draw.Marker.js"></script>
<script src="/static/js/plugins/leaflet/leaflet.draw/draw/handler/Draw.CircleMarker.js"></script>
<script src="/static/js/plugins/leaflet/leaflet.draw/ext/TouchEvents.js"></script>
<script src="/static/js/plugins/leaflet/leaflet.draw/ext/LatLngUtil.js"></script>
<script src="/static/js/plugins/leaflet/leaflet.draw/ext/GeometryUtil.js"></script>
<script src="/static/js/plugins/leaflet/leaflet.draw/ext/LineUtil.Intersect.js"></script>
<script src="/static/js/plugins/leaflet/leaflet.draw/ext/Polyline.Intersect.js"></script>
<script src="/static/js/plugins/leaflet/leaflet.draw/ext/Polygon.Intersect.js"></script>
<script src="/static/js/plugins/leaflet/leaflet.draw/Control.Draw.js"></script>
<script src="/static/js/plugins/leaflet/leaflet.draw/Tooltip.js"></script>
<script src="/static/js/plugins/leaflet/leaflet.draw/Toolbar.js"></script>
<script src="/static/js/plugins/leaflet/leaflet.draw/draw/DrawToolbar.js"></script>
<script src="/static/js/plugins/leaflet/leaflet.draw/edit/EditToolbar.js"></script>
<script src="/static/js/plugins/leaflet/leaflet.draw/edit/handler/EditToolbar.Edit.js"></script>
<script src="/static/js/plugins/leaflet/leaflet.draw/edit/handler/EditToolbar.Delete.js"></script>
<script src="/static/js/plugins/leaflet/easy-button.js"></script>

<script src="/static/js/sweetalert2.js"></script>


<script>
    var vertices = []; // list of vertices entered by map
    var test = {
        '10#10': [[20, 20], [20, 30]],
        '20#20': [[10, 10], [20, 30]],
        '20#30': [[10, 10], [20, 20], [50, 50]],
        '40#40': [],
        '50#50': [[20, 30]],
    };
    var start_vertex = '';
    var end_vertex = '';
    var edge_draw_enable = false;
    $('#graph_map').css('height', $(window.top).height() - 275);
    $('#controller').css('height', $(window.top).height() - 245);
    var map = L.map('graph_map', {
        crs: L.CRS.Simple,
        minZoom: -100,
    });
    var bounds = [[-1 * ('{{.MapHeight}}' / 2), -1 * ('{{.MapWidth}}' / 2)], [('{{.MapHeight}}' / 2), ('{{.MapWidth}}' / 2)]];
    var image = L.imageOverlay('{{.MapPath}}', bounds).addTo(map);
    map.setView([50, 100], 2);

    var graph_layer = L.featureGroup().addTo(map);

    //TODO: create a custom vertex icon. Help: https://leafletjs.com/examples/custom-icons/

    //a Utility function for indexOf function in 2 dimentional arrays
    function isItemInArray(array, item) {
        for (var i = 0; i < array.length; i++) {
            // This if statement depends on the format of your array
            if (array[i][0] == item[0] && array[i][1] == item[1]) {
                return true;   // Found it
            }
        }
        return false;   // Not found
    }


    function get_and_draw_graph(init_markers_object) {
        var visited_vertices = [];
        for (var key in init_markers_object) {
            // skip loop if the property is from prototype
            if (!init_markers_object.hasOwnProperty(key)) continue;

            var start_marker_position = [parseFloat(key.split('#')[0]), parseFloat(key.split('#')[1])];
            visited_vertices.push(start_marker_position);
            var obj = init_markers_object[key];
            //add vertex
            // var marker = L.marker(start_marker_position);
            var marker = L.userMarker(start_marker_position, {
                smallIcon: true
            });
            // marker.bindPopup("<b>" + start_marker_position.toString() + "</b>");
            marker.addTo(graph_layer);

            for (var prop in obj) {
                // skip loop if the property is from prototype
                if (!obj.hasOwnProperty(prop)) continue;

                var end_marker_position = obj[prop];
                // if (visited_vertices.indexOf(end_marker_position) === -1) {
                if (!isItemInArray(visited_vertices, end_marker_position)) {
                    var edge = new L.polyline([start_marker_position, end_marker_position], {
                        color: 'red',
                        weight: 5,
                        opacity: 0.8,
                        smoothFactor: 1
                    }).addTo(graph_layer);
                }

            }
        }

    }


    map.on('click', function (e) {
        $('#map_point_x').val(Math.round(e.latlng.lat) + ".0");
        $('#map_point_y').val(Math.round(e.latlng.lng) + ".0");
    });


    L.easyButton({
        states: [{
            stateName: 'edge_draw_enable',
            icon: 'fa-pencil',
            title: 'Edge drawing is enabled!',
            onClick: function (btn, map) {
                if (!edge_draw_enable) {
                    edge_draw_enable = true;

                } else {
                    edge_draw_enable = false
                }
                btn.state('save_graph');    // change state on click!
            }
        }, {
            stateName: 'save_graph',
            icon: 'fa-save',
            title: 'Save graph in db',
            onClick: function (btn, map) {
                console.table(test);
                swal2('Save Graph', 'Save Graph to db?', 'success');
                btn.state('edge_draw_enable');
                return test;
            }
        }]
    }).addTo(map);
    var drawControl = new L.Control.Draw({
        position: 'topright',
        edit: {
            featureGroup: graph_layer,
            edit: false
        },
        draw: {
            polygon: false,
            polyline: false,
            marker: true,
            circle: false,
            circlemarker: false,
            rectangle: false,
        }
    });

    map.addControl(drawControl);

    map.on('draw:created', function (e) {
        var layer = e.layer;
        var layerType = e.layerType;
        if (layerType === 'marker') {
            var new_vertex_key = layer.getLatLng().lat.toString() + '#' + layer.getLatLng().lng.toString();
            test[new_vertex_key] = [];
            var new_marker = L.userMarker(layer.getLatLng(), {
                smallIcon: true
            });
            graph_layer.addLayer(new_marker);

        }
    });


    map.on('draw:deleted', function (e) {
        var removed_layers = e.layers;
        //https://stackoverflow.com/questions/18014907/leaflet-draw-retrieve-layer-type-on-drawedited-event
        removed_vertices = [];
        removed_edges = [];
        removed_layers.eachLayer(function (layer) {
            if (layer instanceof L.Polyline) {
                var start_vertex = [layer.getLatLngs()[0].lat, layer.getLatLngs()[0].lng];
                var end_vertex = [layer.getLatLngs()[1].lat, layer.getLatLngs()[1].lng];
                removed_edges.push([start_vertex, end_vertex])
            }

            if (layer instanceof L.Marker) {
                vertex_position = (layer.getLatLng().lat).toString() + '.0' + ',' + (layer.getLatLng().lng) + '.0';
                removed_vertices.push(vertex_position)
            }
        });
        //send removed layers to server
        $.ajax({
            method: "POST",
            url: "/test?group={{ .Group }}",
            dataType: "json",
            data: JSON.stringify({
                "removed_vertices": removed_vertices,
                "removed_edges": removed_edges,
            }),
            success: function (data, textStatus, jqXHR) {
                if (data['success']) {
                    swal2(
                            'Removed!',
                            'The selected layers have been removed.',
                            'success'
                    );
                }
            },
            error: function (data, textStatus, jqXHR) {
                swal2(
                        'Error!',
                        'The selected layers have not been removed.',
                        'error'
                );
                console.log(data)
            }
        });
    });


    //add edge between two vertex
    graph_layer.on('click', function (e) {
        // console.log('***************');
        //if user clicks on a marker (not a line) and edge drawing is enabled
        if (e.layer instanceof L.Marker && edge_draw_enable) {
            //start of edge drawing
            if (start_vertex === '' && end_vertex === '') {
                start_vertex = [e.layer.getLatLng().lat, e.layer.getLatLng().lng];
                //    the second vertex is clicked
            } else if (start_vertex !== '' && end_vertex === '') {
                end_vertex = [e.layer.getLatLng().lat, e.layer.getLatLng().lng];
                //vertex keys in test object (e.g "20#40")
                var start_vertex_key = start_vertex[0] + '#' + start_vertex[1];
                var end_vertex_key = end_vertex[0] + '#' + end_vertex[1];
                //making the new edge
                var new_edge = new L.polyline([start_vertex, end_vertex], {
                    color: 'green',
                    weight: 5,
                    opacity: 0.8,
                    smoothFactor: 1
                });
                //if start vertex is not the same as end vertex
                if (((start_vertex[0] !== end_vertex[0]) && (start_vertex[1] !== end_vertex[1]))) {
                    //if start_vertex has no edges
                    if (JSON.stringify(test[start_vertex_key]) == "[]") {
                        test[start_vertex_key] = [end_vertex];
                        test[end_vertex_key].push(start_vertex);
                        new_edge.addTo(graph_layer);

                    }
                    //if start_vertex is connected to some vertices, but has no edge to end_vertex
                    else if (!isItemInArray(test[start_vertex_key], end_vertex)) {
                        test[start_vertex_key].push(end_vertex);
                        test[end_vertex_key].push(start_vertex);
                        new_edge.addTo(graph_layer);
                    }
                }

                //reset start and end vertex variable
                start_vertex = '';
                end_vertex = '';
            }
        }


        // console.log('***************');


    });


    $('#add_vertex_button').click(function () {
        var vertex = ("<td><input type='checkbox' name='record'></td><td>" + (vertices.length + 1).toString() + "</td><td>" + $('#map_point_x').val() + "</td><td>" + $('#map_point_y').val() + "</td>");
        vertices.push($('#map_point_x').val() + "," + $('#map_point_y').val());
        console.log(vertices);
        $("<tr/>", {
            "class": "tab-content",
            html: vertex
        }).appendTo("#vertices_table>tbody");

        L.userMarker([$('#map_point_x').val(), $('#map_point_y').val()], {
            smallIcon: true
        }).bindPopup("<b>" + $('#map_point_x').val() + "," + $('#map_point_y').val() + "</b>").addTo(graph_layer);
    });


    // Find and remove selected table rows
    $("#deleteSelected").click(function () {
        $("table tbody").find('input[name="record"]').each(function () {
            if ($(this).is(":checked")) {
                $(this).parents("tr").remove();
            }
        });
        console.log(graph_layer)
        //map.removeLayer(L.userMarker( [$('#map_point_x').val(), $('#map_point_y').val()]));
        //todo: delete marker from map. it needs to get the one from the graph_layer list then remove it from map
    });
    get_and_draw_graph(test)
</script>
</body>

</html>
