<!DOCTYPE html>
<html>

<head>
  <meta charset=utf-8 />
  <title>PARSIN</title>
  <link rel="shortcut icon" sizes="16x16 24x24 32x32 48x48 64x64" href="/static/img/favicon.ico" />
  <meta name='viewport' content='initial-scale=1,maximum-scale=1,user-scalable=no' />

  <!-- Bootstrap and JQuery JS -->
  <script src="/static/js/jquery-2.0.0.min.js"></script>
  <script src='/static/js/bootstrap.js'></script>

  <!-- Bootstrap Core CSS -->
  <link href="/static/css/bootstrap.min.css" rel="stylesheet">

  <!-- Custom CSS -->
  <link href="/static/css/2-col-portfolio.css" rel="stylesheet">

  <!-- Font Awesome CSS -->
  <link rel="stylesheet" href="/static/css/font-awesome.min.css">

  <style>
    .location-listing > .row > .col-md-6:nth-child(2n+1) {
      clear: both;
    }

    iframe:focus {
      outline: none;
    }

    iframe[seamless] {
      display: block;
    }

    dl {
      width: 100%;
      overflow: hidden;
      margin: 0;
      padding: 0;
    }

    dt, dd {
      float: left;
      width: 50%;
      margin: 0;
      padding: 0;
      /* adjust the width; make sure the total of both is 100% */
    }

    .chartLabel {
      font: 16px sans-serif;
      fill: #666;
    }

    .arcLabel {
      font: 10px sans-serif;
      fill: #fff;
    }
  </style>



  <script src="/static/js/sweetalert.min.js"></script>
  <script src="/static/js/d3.min.js"></script>
  <script src="/static/js/d3.tip.v0.6.3.js"></script>
  <link rel="stylesheet" type="text/css" href="/static/css/sweetalert.css">


  <link rel="stylesheet" href="/static/css/jquery-ui.css">
  <script src="/static/js/jquery-ui.js"></script>
  <script>
  $(function() {
    $( document ).tooltip({
      position: {
        my: "center bottom-20",
        at: "center top",
        using: function( position, feedback ) {
          $( this ).css( position );
          $( "<div>" )
            .addClass( "arrow" )
            .addClass( feedback.vertical )
            .addClass( feedback.horizontal )
            .appendTo( this );
        }
      }
    });
  });
  </script>
  <style>
  .ui-tooltip, .arrow:after {
    background: black;
    border: 2px solid white;
  }
  .ui-tooltip {
    padding: 10px 20px;
    color: white;
    border-radius: 20px;
    font: bold 14px "Helvetica Neue", Sans-Serif;
    box-shadow: 0 0 7px black;
  }
  .arrow {
    width: 70px;
    height: 16px;
    overflow: hidden;
    position: absolute;
    left: 50%;
    margin-left: -35px;
    bottom: -16px;
  }
  .arrow.top {
    top: -16px;
    bottom: auto;
  }
  .arrow.left {
    left: 20%;
  }
  .arrow:after {
    content: "";
    position: absolute;
    left: 20px;
    top: -20px;
    width: 35px;
    height: 25px;
    box-shadow: 6px 5px 9px -9px black;
    -webkit-transform: rotate(45deg);
    -ms-transform: rotate(45deg);
    transform: rotate(45deg);
  }
  .arrow.top:after {
    bottom: -20px;
    top: auto;
  }
  </style>

</head>

<body>


{{ template "navbar" . }}

  <!-- Page Content -->
  <div class="container">

    {{ if .Message }}
    <div class="row">
      <div class="col-lg-12">
          <center>
          <div class="alert alert-info" role="alert">{{ .Message }}</div>
        </center>
      </div>
    </div>
    {{ end }}


    <div class="row">
      <div class="col-lg-12">
        <h2 class="page-header">Dashboard
         <small>View database statistics and fingerprint integrity</small>
       </h2>
      </div>
    </div>

    <!-- Page Header -->
    <!-- <div class="row clearfix" id="content-row">
      <div class="col-xs-12 column">
        <div class="center-block">
          <p class="bg-success text-center lead">
            Message</p>
        </div>
      </div>
    </div> -->


    <div class="row clearfix" id="content-row">
      <div class="col-xs-12 column">
        <h3>Database statistics</h3>
      </div>
    </div>

    <div class="well" id="volume-stats-well">
            KNN:

           <div class="panel panel-primary " id="volume-fees-panel">
                 <div class="panel-body ">
                 K range = {{ $.kRange }}
                 <br>
                 Min cluster rss range = {{ $.knnMinCRssRange }}
                 </div>
           </div>
       </div>
    <div class="well" id="volume-stats-well">
      <div class="panel panel-primary" id="volume-fees-panel">
          <div class="panel-body">
            <div class="row">
                <div class="col-sm-2 col-xs-6">
              <button type="submit" class="btn btn-info btn-block" id="recalculateAll" title="Reclaculate the machine learning parameters and update your statistics.">Update</button>
            </div>
                <div class="col-sm-2 col-xs-6">
              <button type="submit" class="btn btn-success btn-block" id="getMQTT" title="Get MQTT password.">Get MQTT</button>
            </div>
                <div class="col-sm-2 col-xs-6">
              <button type="submit" class="btn btn-danger btn-block" id="setMixin" title="Set Mixin for parameters.">Set Mixin</button>
            </div>
                <div class="col-sm-2 col-xs-6">
              <button type="submit" class="btn btn-danger btn-block" id="setKnnMinRss" title="Set Knn MinClusterRSS Range for parameters.">Set Knn rss range</button>
            </div>
                <div class="col-sm-2 col-xs-6">
                    <button type="submit" class="btn btn-primary btn-block" id="setKRange" title="Set K range for KNN.">Set K range</button>
                </div>
                <div class="col-sm-2 col-xs-6">
                    <button type="submit" class="btn btn-warning btn-block" id="setMinRss" title="Set K for KNN.">Set
                        Min RSS
                    </button>
                </div>
          </div>
          </div>
      </div>


      <div class="row clearfix" id="location-listing">


        {{ range $index, $element := .Dash.Networks }}

        <div class="col-md-6 column" id="volume-fees-chart">
          <div class="panel panel-primary" id="volume-fees-panel">
            <div class="panel-heading">
              <h3 class="panel-title">
                         {{ $element }}
                         <a id="{{ $element }}" class="editnetworkloc" title="Click to change this networks name">&nbsp;<span class="fa fa-pencil-square-o"></span></a>
                         (Mixin = {{ index $.Dash.Mixin $element }}, Cutoff = {{ index $.Dash.VarabilityCutoff $element }})
                       </h3>
            </div>
            <div class="panel-body">
              {{ range $locIndex, $loc := index $.Dash.Locations $element }}
              <dl>
                <dt>
                  <a  href="#" onClick="window.open('/explore/{{ $.Group }}/{{ $element }}/{{ $loc }}','pagename','resizable,height=420,width=1000'); return false;" title="Click to explore the signal values of the APs at '{{ $loc }}'.">
                  {{ $loc }}
                </a>
                 &nbsp;
                  <a id="{{ $loc }}" class="editloc" title="Click to change name of '{{ $loc }}'"><span class="fa fa-pencil-square-o"></span></a>&nbsp;<a id="{{ $loc }}" class="deleteloc"  title="Click to delete '{{ $loc }}'"><i class="fa fa-trash"></i></a>&nbsp;</dt>
                  <dd><span title="Number of learned fingerprints">({{ index $.Dash.LocationCount $loc }})</span>
                      &nbsp;
                  <span class="bg-success"><a title="Click to open pie chart depicting frequency of classification for '{{ $loc }}'" href="#" onClick="window.open('/pie/{{ $.Group }}/{{ $element }}/{{ $loc }}','pagename','resizable,height=380,width=480'); return false;">{{ index $.Dash.LocationAccuracy $loc }}%</a>  </span>
                </dd>
              </dl>
              {{ end }}
            </div>
          </div>
        </div>

        {{ end}}


      </div>
    </div>





        <div class="row clearfix" id="content-row">
          <div class="col-xs-12 column">
            <h3>Users</h3>
          </div>
        </div>


        <div class="well" id="volume-stats-well">

          <div class="panel panel-primary" id="volume-fees-panel">
              <div class="panel-body">
              <button class="btn btn-warning btn-block" id="startTracking" title="Click to start tracking all the users in realtime. There current positions will update here.">Track</button>
              </div>
          </div>

          <div class="row clearfix" id="location-listing">


            {{ range $index, $user := .Users }}

            <div class="col-md-6 column" id="volume-fees-chart">
              <div class="panel panel-primary" id="volume-fees-panel">
                <div class="panel-heading">
                  <h3 class="panel-title">
                             {{ $index }} &nbsp;<a id="{{ $index }}" class="edituser" title="Click to change the name for '{{ $index }}'"><span class="fa fa-pencil-square-o"></span></a>&nbsp;<a id="{{ $index }}" class="deleteuser" title="Click to delete user '{{ $index }}'"><i class="fa fa-trash"></i></a>
                             &nbsp;<a href="/dashboard/{{ $.Group }}?user={{ $index }}" title="Click to filter user '{{ $index }}'"><i class="fa fa-filter"></i></a>
                             &nbsp;<a onclick="window.open('/lastfingerprint?group={{ $.Group }}&user={{ $index }}', 'newwindow', 'width=350, height=450'); return false;" href="/lastfingerprint?group={{ $.Group }}&user={{ $index }}" title="Click to show last fingerprint of user '{{ $index }}'"><i class="fa fa-wifi"></i></a>
                           </h3>
                </div>
                <div class="panel-body">
                    <p id="lastSeen{{$index}}" title="Shows the last time and place of user when you are tracking.">
                        <strong>Last seen:</strong> {{ $user.Time }} at {{ $user.KnnGuess }}</p>
                  <p id="bayes{{$index}}" title="Shows the exponential Bayesian scores when you are tracking."></p>
                  <p id="svm{{$index}}" title="Shows the SVM scores when you are tracking."></p>
                  <p id="scikit{{$index}}" title="Shows the random forest scores when you are tracking."></p>
                </div>
              </div>
            </div>

            {{ end }}


          </div>
        </div>


  </div>



  <script>

  function jq( myid ) {

      return myid.replace(".","\\.").replace("@","\\@");

  }

  var qs = (function(a) {
      if (a == "") return {};
      var b = {};
      for (var i = 0; i < a.length; ++i)
      {
          var p=a[i].split('=', 2);
          if (p.length == 1)
              b[p[0]] = "";
          else
              b[p[0]] = decodeURIComponent(p[1].replace(/\+/g, " "));
      }
      return b;
  })(window.location.search.substr(1).split('&'));

 var userInterval;
function userLocPolling() {
  jsonData = {};
  jsonData.group = "{{ .Group }}";
  if (qs['users'] != undefined) {
    jsonData.users = qs['users'];
  }
  if (qs['user'] != undefined) {
    jsonData.users = qs['user'];
  }
        $.getJSON("/userlocs", jsonData,
          function(data) {
            if (data['success'] == true) {
              for (var key in data['users']) {
                userkey = key;
                console.log(key)
                console.log(data['users'][key])
                $(jq('#lastSeen' + key)).html("<strong>Last seen:</strong> " + data['users'][key]['time'] + " at " + data['users'][key]['location']);
                // $('#bayes' + key).text("Bayes: " + JSON.stringify(data['users'][key]['bayes']));

                var tuples = [];
                for (var key2 in data['users'][key]['bayes']) tuples.push([key2, data['users'][key]['bayes'][key2]]);
                tuples.sort(function(a, b) {
                    a = a[1];
                    b = b[1];
                    return a < b ? -1 : (a > b ? 1 : 0);
                });
                total = 0;
                for (var i = tuples.length-1; i >=0; i--) {
                    var value = Math.exp(tuples[i][1]);
                    total += value;
                }
                vals = []
                for (var i = tuples.length-1; i >=0; i--) {
                    var key4 = tuples[i][0];
                    var value = Math.round(Math.exp(tuples[i][1])/total*100);
                    vals.push(value + "% " + key4)
                    if (vals.length > 2) {
                      break
                    }
                }
                console.log(vals.join())
               $(jq('#bayes' + userkey)).html("<strong>Naive-Bayes:</strong> " + vals.join())
              if (data['users'][key]['svm'] != undefined && Object.keys(data['users'][key]['svm']).length > 0) {
                console.log(data['users'][key]['svm'])
                var tuples = [];
                for (var key2 in data['users'][key]['svm']) tuples.push([key2, data['users'][key]['svm'][key2]]);
                vals = []
                tuples.sort(function(a, b) {
                    a = a[1];
                    b = b[1];
                    return a < b ? -1 : (a > b ? 1 : 0);
                });
                for (var i = tuples.length-1; i >=0; i--) {
                    var keyt = tuples[i][0];
                    var value = Math.round(Math.exp(tuples[i][1])*100);
                    vals.push(value + "% " + keyt)
                    if (vals.length > 2) {
                      break
                    }
                }
                console.log(vals.join())
               $(jq('#svm' + userkey)).html("<strong>SVM:</strong> " + vals.join())
              }
              if (data['users'][key]['scikit'] != undefined && Object.keys(data['users'][key]['rf']).length > 0) {
                console.log(data['users'][key]['rf'])
                var tuples = [];
                for (var key2 in data['users'][key]['rf']) tuples.push([key2, data['users'][key]['rf'][key2]]);
                vals = []
                tuples.sort(function(a, b) {
                    a = a[1];
                    b = b[1];
                    return a < b ? -1 : (a > b ? 1 : 0);
                });
                for (var i = tuples.length-1; i >=0; i--) {
                    var keyt = tuples[i][0];
                    var value = Math.round(tuples[i][1]*100);
                    vals.push(value + "% " + keyt)
                    if (vals.length > 2) {
                      break
                    }
                }
                console.log(vals.join())
               $(jq('#scikit' + userkey)).html("<strong>scikit:</strong> " + vals.join())
              }



              }
            }
          });
      }

    $(document).ready(function() {
      $('.deleteloc').css('cursor', 'pointer');
      $('.deleteuser').css('cursor', 'pointer');
      $('.editloc').css('cursor', 'pointer');
      $('.edituser').css('cursor', 'pointer');
      $('.editnetworkname').css('cursor', 'pointer');
      $('.editnetworkloc').css('cursor', 'pointer');

      //userInterval = setInterval(userLocPolling,1500);

    });

        $('.deleteloc').click(function() {
          var placeToDelete = $(this).attr('id');
          swal({
              title: "Delete location",
              text: "Are you sure you want to delete " + placeToDelete,
              type: "warning",
              showCancelButton: true,
              confirmButtonColor: "#DD6B55",
              confirmButtonText: "Yes, delete it!",
              cancelButtonText: "No, cancel pls!",
              closeOnConfirm: false,
              closeOnCancel: false
            },
            function(isConfirm) {
              if (isConfirm) {
                var req = $.ajax({
                  method: "DELETE",
                  url: "/location"+ '?' + $.param({"group": "{{ .Group }}", "location": placeToDelete})
                })
                req.done(function(data) {
                    console.log(data)
                    swal("Deleted!", data['message'], "success");
                    location.reload();
                  });
                req.fail(function(data) {
                    swal("Sorry", data['message'], "error");
                  });
              } else {
                swal("Cancelled", "Your data is safe :)", "error");
              }
            });

        });

        $('.deleteuser').click(function() {
          var userToDelete = $(this).attr('id');
          swal({
              title: "Delete user",
              text: "Are you sure you want to delete " + userToDelete,
              type: "warning",
              showCancelButton: true,
              confirmButtonColor: "#DD6B55",
              confirmButtonText: "Yes, delete it!",
              cancelButtonText: "No, cancel pls!",
              closeOnConfirm: false,
              closeOnCancel: false
            },
            function(isConfirm) {
              if (isConfirm) {
                var req = $.ajax({
                  method: "DELETE",
                  url: "/user" + '?' + $.param({"group": "{{ .Group }}", "user": userToDelete })
                })
                req.done(function(data) {
                    console.log(data)
                    swal("Deleted!", data['message'], "success");
                    location.reload();
                  });
                req.fail(function(data) {
                    swal("Sorry", data['message'], "error");
                  });
              } else {
                swal("Cancelled", "Your data is safe :)", "error");
              }
            });

        });

    $('#startTracking').click(function() {
      userLocPolling()
      userInterval = setInterval(userLocPolling,1500)
    });

    $('#recalculateAll').click(function() {
      swal({
          title: "Recalculate priors and analyze accuracy",
          text: "This may take a minute",
          type: "info",
          showCancelButton: true,
          closeOnConfirm: false,
          showLoaderOnConfirm: true,
        },
        function() {
          $.get("/calculate", {
              "group": "{{ .Group }}",
            },
            function(data) {
              console.log(data);
              if (data['success']) {
                swal("Recalculating priors successful!");
                location.reload();
              }
            }
          );
        });
    });

            $('.editloc').click(function() {
              var place = $(this).attr('id');
              swal({
                  title: "Edit location",
                  text: "Are you sure you want to rename '" + place + "'",
                  type: "warning",
                  showCancelButton: true,
                  confirmButtonColor: "#DD6B55",
                  confirmButtonText: "Yes, rename it!",
                  cancelButtonText: "No, cancel pls!",
                  closeOnConfirm: false,
                  closeOnCancel: false
                },
                function(isConfirm) {
                  if (isConfirm) {


                    swal({
                        title: "Edit name",
                        text: "Enter the new name for '" + place + "':",
                        type: "input",
                        showCancelButton: true,
                        closeOnConfirm: false,
                        animation: "slide-from-top",
                        inputPlaceholder: "newlocation"
                      },
                      function(inputValue) {
                        if (inputValue === false) {
                          swal.showInputError("You need to write something!");
                          return false
                        }

                        if (inputValue === "") {
                          swal.showInputError("You need to write something!");
                          return false
                        }
                        console.log({
                          "group": "{{ .Group }}",
                          "location": place,
                          "newname": inputValue
                        })
                        $.get("/editname", {
                            "group": "{{ .Group }}",
                            "location": place,
                            "newname": inputValue
                          },
                          function(data) {
                            console.log(data);
                            if (data['success']) {
                              swal("Edited!", data['message'], "success");
                              location.reload()
                            } else {
                              swal("Something went wrong.", data['message'], "error");
                            }
                          }
                        );


                        swal("Nice!", "You wrote: " + inputValue, "success");
                      });

                  } else {
                    swal("Cancelled", "Name is still the same! :)", "error");
                  }
                });

            });



                    $('.edituser').click(function() {
                      var place = $(this).attr('id');
                      swal({
                          title: "Edit user name",
                          text: "Are you sure you want to rename '" + place + "'",
                          type: "warning",
                          showCancelButton: true,
                          confirmButtonColor: "#DD6B55",
                          confirmButtonText: "Yes, rename it!",
                          cancelButtonText: "No, cancel pls!",
                          closeOnConfirm: false,
                          closeOnCancel: false
                        },
                        function(isConfirm) {
                          if (isConfirm) {


                            swal({
                                title: "Edit name",
                                text: "Enter the new name for '" + place + "':",
                                type: "input",
                                showCancelButton: true,
                                closeOnConfirm: false,
                                animation: "slide-from-top",
                                inputPlaceholder: "newlocation"
                              },
                              function(inputValue) {
                                if (inputValue === false) {
                                  swal.showInputError("You need to write something!");
                                  return false
                                }

                                if (inputValue === "") {
                                  swal.showInputError("You need to write something!");
                                  return false
                                }
                                console.log({
                                  "group": "{{ .Group }}",
                                  "user": place,
                                  "newname": inputValue
                                })
                                $.get("/editusername", {
                                    "group": "{{ .Group }}",
                                    "user": place,
                                    "newname": inputValue
                                  },
                                  function(data) {
                                    console.log(data);
                                    if (data['success']) {
                                      swal("Edited!", data['message'], "success");
                                      location.reload()
                                    } else {
                                      swal("Something went wrong.", data['message'], "error");
                                    }
                                  }
                                );


                                swal("Nice!", "You wrote: " + inputValue, "success");
                              });

                          } else {
                            swal("Cancelled", "Name is still the same! :)", "error");
                          }
                        });

                    });



            $('.editnetworkloc').click(function() {
              var place = $(this).attr('id');
              swal({
                  title: "Edit location",
                  text: "Are you sure you want to rename '" + place + "'",
                  type: "warning",
                  showCancelButton: true,
                  confirmButtonColor: "#DD6B55",
                  confirmButtonText: "Yes, rename it!",
                  cancelButtonText: "No, cancel pls!",
                  closeOnConfirm: false,
                  closeOnCancel: false
                },
                function(isConfirm) {
                  if (isConfirm) {


                    swal({
                        title: "Edit name",
                        text: "Enter the new name for '" + place + "':",
                        type: "input",
                        showCancelButton: true,
                        closeOnConfirm: false,
                        animation: "slide-from-top",
                        inputPlaceholder: "newlocation"
                      },
                      function(inputValue) {
                        if (inputValue === false) {
                          swal.showInputError("You need to write something!");
                          return false
                        }

                        if (inputValue === "") {
                          swal.showInputError("You need to write something!");
                          return false
                        }
                        console.log({
                          "group": "{{ .Group }}",
                          "oldname": place,
                          "newname": inputValue
                        })
                        $.get("/editnetworkname", {
                            "group": "{{ .Group }}",
                            "oldname": place,
                            "newname": inputValue
                          },
                          function(data) {
                            console.log(data);
                            if (data['success']) {
                              swal("Edited!", data['message'], "success");
                              location.reload()
                            } else {
                              swal("Something went wrong.", data['message'], "error");
                            }
                          }
                        );


                        swal("Please wait while name is changed", "You wrote: " + inputValue, "success");
                      });

                  } else {
                    swal("Cancelled", "Name is still the same! :)", "error");
                  }
                });

            });


            $('.editnetworkloc').click(function() {
              var place = $(this).attr('id');
              swal({
                  title: "Edit location",
                  text: "Are you sure you want to rename '" + place + "'",
                  type: "warning",
                  showCancelButton: true,
                  confirmButtonColor: "#DD6B55",
                  confirmButtonText: "Yes, rename it!",
                  cancelButtonText: "No, cancel pls!",
                  closeOnConfirm: false,
                  closeOnCancel: false
                },
                function(isConfirm) {
                  if (isConfirm) {


                    swal({
                        title: "Edit name",
                        text: "Enter the new name for '" + place + "':",
                        type: "input",
                        showCancelButton: true,
                        closeOnConfirm: false,
                        animation: "slide-from-top",
                        inputPlaceholder: "newlocation"
                      },
                      function(inputValue) {
                        if (inputValue === false) {
                          swal.showInputError("You need to write something!");
                          return false
                        }

                        if (inputValue === "") {
                          swal.showInputError("You need to write something!");
                          return false
                        }
                        console.log({
                          "group": "{{ .Group }}",
                          "oldname": place,
                          "newname": inputValue
                        })
                        $.get("/editnetworkname", {
                            "group": "{{ .Group }}",
                            "oldname": place,
                            "newname": inputValue
                          },
                          function(data) {
                            console.log(data);
                            if (data['success']) {
                              swal("Edited!", data['message'], "success");
                              location.reload()
                            } else {
                              swal("Something went wrong.", data['message'], "error");
                            }
                          }
                        );


                        swal("Please wait while name is changed", "You wrote: " + inputValue, "success");
                      });

                  } else {
                    swal("Cancelled", "Name is still the same! :)", "error");
                  }
                });

            });



$('#getMQTT').click(function() {
  $.ajax({
    url:"/mqtt?group={{ .Group }}",
    type: "PUT",
    success: function(data) {
      console.log(data);
      if (data['success']) {
        swal({
          title: "MQTT is setup!",
          text: "Your password is: " + data['password'] + "\nYou can listen on topic '{{ .Group }}/location/USER'",
          timer: 5000,
          showConfirmButton: true
        });
      } else {
        swal("Something went wrong.", data['message'], "error");
      }
    }
  });
});

$('#setMixin').click(function() {
    swal({
        title: "Set Mixin",
        text: "Enter the new Mixin (between 0 and 1, or -1 to set automatically):",
        type: "input",
        showCancelButton: true,
        closeOnConfirm: false,
        animation: "slide-from-top",
        inputPlaceholder: "newlocation"
      },
      function(inputValue) {
        if (inputValue === false || inputValue === "") {
          swal.showInputError("You need to write something!");
          return false
        }
        $.ajax({
          url:"/mixin?group={{ .Group }}&mixin="+inputValue,
          type: "PUT",
          success: function(data) {
            console.log(data);
            if (data['success']) {
              swal({
                title: "Updated!",
                text: data['message'],
                timer: 2000,
                showConfirmButton: true
              },function(){
                location.reload();
              });
            } else {
              swal("Something went wrong.", data['message'], "error");
            }
          }
        });
      });
  });

$('#setKnnMinRss').click(function() {
    swal({
        title: "Set Knn MinClusterRSS range",
        text: "Enter the new Knn MinClusterRSS range :",
        type: "input",
        showCancelButton: true,
        closeOnConfirm: false,
        animation: "slide-from-top",
        inputPlaceholder: "[begin,end] or [specific rss]; example:[-60,-90]"
      },
      function(inputValue) {
        if (inputValue === false || inputValue === "") {
          swal.showInputError("You need to write something!");
          return false
        }

        $.ajax({
          url:"/KnnMinClusterRSSRange?group={{ .Group }}&range="+inputValue,
          type: "PUT",
          success: function(data) {
            console.log(data);
            if (data['success']) {
              swal({
                title: "Updated!",
                text: data['message'],
                timer: 2000,
                showConfirmButton: true
              },function(){
                location.reload();
              });
            } else {
              swal("Something went wrong.", data['message'], "error");
            }
          }
        });
      });
  });

  $('#setKRange').click(function () {
      swal({
              title: "Set K range",
              text: "Enter the K range for KNN:",
              type: "input",
              showCancelButton: true,
              closeOnConfirm: false,
              animation: "slide-from-top",
              inputPlaceholder: "[begin,end] or [specific K]; example:[1,30]"
          },
          function (inputValue) {
              if (inputValue === false || inputValue === "") {
                  swal.showInputError("You need to write something!");
                  return false
              }

              $.ajax({
                  url: "/KnnKRange?group={{ .Group }}&range=" + inputValue,
                  type: "PUT",
                  success: function (data) {
                      console.log(data);
                      if (data['success']) {
                          swal({
                              title: "Updated!",
                              text: data['message'],
                              timer: 2000,
                              showConfirmButton: true
                          }, function () {
                              location.reload();
                          });
                      } else {
                          swal("Something went wrong.", data['message'], "error");
                      }
                  }
              });
          });
  });

  $('#setMinRss').click(function () {
      swal({
              title: "Set Minimum RSS",
              text: "Enter the new Minimum RSS filter:",
              type: "input",
              showCancelButton: true,
              closeOnConfirm: false,
              animation: "slide-from-top",
              inputPlaceholder: "newlocation"
          },
          function (inputValue) {
              if (inputValue === false || inputValue === "") {
                  swal.showInputError("You need to write something!");
                  return false
              }

              $.ajax({
                  url: "/minrss?group={{ .Group }}&minRss=" + inputValue,
                  type: "PUT",
                  success: function (data) {
                      console.log(data);
                      if (data['success']) {
                          swal({
                              title: "Updated!",
                              text: data['message'],
                              timer: 2000,
                              showConfirmButton: true
                          }, function () {
                              location.reload();
                          });
                      } else {
                          swal("Something went wrong.", data['message'], "error");
                      }
                  }
              });
          });
  });
  </script>






</body>

</html>
