// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package parameters

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson2419208eDecodeParsinServerDbmParameters(in *jlexer.Lexer, out *Node) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Label":
			out.Label = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2419208eEncodeParsinServerDbmParameters(out *jwriter.Writer, in Node) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Label\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Label))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Node) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2419208eEncodeParsinServerDbmParameters(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Node) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2419208eEncodeParsinServerDbmParameters(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Node) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2419208eDecodeParsinServerDbmParameters(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Node) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2419208eDecodeParsinServerDbmParameters(l, v)
}
func easyjson2419208eDecodeParsinServerDbmParameters1(in *jlexer.Lexer, out *Graph) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Nodes":
			if in.IsNull() {
				in.Skip()
				out.Nodes = nil
			} else {
				in.Delim('[')
				if out.Nodes == nil {
					if !in.IsDelim(']') {
						out.Nodes = make([]*Node, 0, 8)
					} else {
						out.Nodes = []*Node{}
					}
				} else {
					out.Nodes = (out.Nodes)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *Node
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(Node)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					out.Nodes = append(out.Nodes, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Edges":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Edges = make(map[Node][]*Node)
				} else {
					out.Edges = nil
				}
				for !in.IsDelim('}') {
					var key Node
					(key).UnmarshalEasyJSON(in)
					in.WantColon()
					var v2 []*Node
					if in.IsNull() {
						in.Skip()
						v2 = nil
					} else {
						in.Delim('[')
						if v2 == nil {
							if !in.IsDelim(']') {
								v2 = make([]*Node, 0, 8)
							} else {
								v2 = []*Node{}
							}
						} else {
							v2 = (v2)[:0]
						}
						for !in.IsDelim(']') {
							var v3 *Node
							if in.IsNull() {
								in.Skip()
								v3 = nil
							} else {
								if v3 == nil {
									v3 = new(Node)
								}
								(*v3).UnmarshalEasyJSON(in)
							}
							v2 = append(v2, v3)
							in.WantComma()
						}
						in.Delim(']')
					}
					(out.Edges)[key] = v2
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2419208eEncodeParsinServerDbmParameters1(out *jwriter.Writer, in Graph) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Nodes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Nodes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v4, v5 := range in.Nodes {
				if v4 > 0 {
					out.RawByte(',')
				}
				if v5 == nil {
					out.RawString("null")
				} else {
					(*v5).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Edges\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Edges == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v6First := true
			for v6Name, v6Value := range in.Edges {
				if v6First {
					v6First = false
				} else {
					out.RawByte(',')
				}
				(v6Name).MarshalEasyJSON(out)
				out.RawByte(':')
				if v6Value == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v7, v8 := range v6Value {
						if v7 > 0 {
							out.RawByte(',')
						}
						if v8 == nil {
							out.RawString("null")
						} else {
							(*v8).MarshalEasyJSON(out)
						}
					}
					out.RawByte(']')
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Graph) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2419208eEncodeParsinServerDbmParameters1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Graph) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2419208eEncodeParsinServerDbmParameters1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Graph) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2419208eDecodeParsinServerDbmParameters1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Graph) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2419208eDecodeParsinServerDbmParameters1(l, v)
}
func easyjson2419208eDecodeParsinServerDbmParameters2(in *jlexer.Lexer, out *EdgeDot) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Begin":
			(out.Begin).UnmarshalEasyJSON(in)
		case "End":
			(out.End).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2419208eEncodeParsinServerDbmParameters2(out *jwriter.Writer, in EdgeDot) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Begin\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Begin).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"End\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.End).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EdgeDot) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2419208eEncodeParsinServerDbmParameters2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EdgeDot) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2419208eEncodeParsinServerDbmParameters2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EdgeDot) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2419208eDecodeParsinServerDbmParameters2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EdgeDot) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2419208eDecodeParsinServerDbmParameters2(l, v)
}
