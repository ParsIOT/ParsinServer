// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package parameters

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson224c90e0DecodeParsinServerDbmParameters(in *jlexer.Lexer, out *UserPositionJSON) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "time":
			out.Time = int64(in.Int64())
		case "location":
			out.Location = string(in.String())
		case "bayesguess":
			out.BayesGuess = string(in.String())
		case "bayesdata":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.BayesData = make(map[string]float64)
				} else {
					out.BayesData = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 float64
					v1 = float64(in.Float64())
					(out.BayesData)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		case "svmguess":
			out.SvmGuess = string(in.String())
		case "svmdata":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.SvmData = make(map[string]float64)
				} else {
					out.SvmData = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v2 float64
					v2 = float64(in.Float64())
					(out.SvmData)[key] = v2
					in.WantComma()
				}
				in.Delim('}')
			}
		case "rfdata":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.ScikitData = make(map[string]string)
				} else {
					out.ScikitData = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v3 string
					v3 = string(in.String())
					(out.ScikitData)[key] = v3
					in.WantComma()
				}
				in.Delim('}')
			}
		case "knnguess":
			out.KnnGuess = string(in.String())
		case "knndata":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.KnnData = make(map[string]float64)
				} else {
					out.KnnData = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v4 float64
					v4 = float64(in.Float64())
					(out.KnnData)[key] = v4
					in.WantComma()
				}
				in.Delim('}')
			}
		case "pdrlocation":
			out.PDRLocation = string(in.String())
		case "fingerprint":
			(out.Fingerprint).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson224c90e0EncodeParsinServerDbmParameters(out *jwriter.Writer, in UserPositionJSON) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"time\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Time))
	}
	{
		const prefix string = ",\"location\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Location))
	}
	{
		const prefix string = ",\"bayesguess\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BayesGuess))
	}
	{
		const prefix string = ",\"bayesdata\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.BayesData == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v5First := true
			for v5Name, v5Value := range in.BayesData {
				if v5First {
					v5First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v5Name))
				out.RawByte(':')
				out.Float64(float64(v5Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"svmguess\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SvmGuess))
	}
	{
		const prefix string = ",\"svmdata\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.SvmData == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v6First := true
			for v6Name, v6Value := range in.SvmData {
				if v6First {
					v6First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v6Name))
				out.RawByte(':')
				out.Float64(float64(v6Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"rfdata\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.ScikitData == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v7First := true
			for v7Name, v7Value := range in.ScikitData {
				if v7First {
					v7First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v7Name))
				out.RawByte(':')
				out.String(string(v7Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"knnguess\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.KnnGuess))
	}
	{
		const prefix string = ",\"knndata\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.KnnData == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v8First := true
			for v8Name, v8Value := range in.KnnData {
				if v8First {
					v8First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v8Name))
				out.RawByte(':')
				out.Float64(float64(v8Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"pdrlocation\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PDRLocation))
	}
	{
		const prefix string = ",\"fingerprint\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Fingerprint).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserPositionJSON) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson224c90e0EncodeParsinServerDbmParameters(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserPositionJSON) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson224c90e0EncodeParsinServerDbmParameters(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserPositionJSON) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson224c90e0DecodeParsinServerDbmParameters(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserPositionJSON) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson224c90e0DecodeParsinServerDbmParameters(l, v)
}
func easyjson224c90e0DecodeParsinServerDbmParameters1(in *jlexer.Lexer, out *TestValidTrack) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "truelocation":
			out.TrueLocation = string(in.String())
		case "userposition":
			(out.UserPosition).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson224c90e0EncodeParsinServerDbmParameters1(out *jwriter.Writer, in TestValidTrack) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"truelocation\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TrueLocation))
	}
	{
		const prefix string = ",\"userposition\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.UserPosition).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TestValidTrack) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson224c90e0EncodeParsinServerDbmParameters1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TestValidTrack) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson224c90e0EncodeParsinServerDbmParameters1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TestValidTrack) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson224c90e0DecodeParsinServerDbmParameters1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TestValidTrack) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson224c90e0DecodeParsinServerDbmParameters1(l, v)
}
func easyjson224c90e0DecodeParsinServerDbmParameters2(in *jlexer.Lexer, out *ResultsParameters) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Accuracy":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Accuracy = make(map[string]int)
				} else {
					out.Accuracy = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v9 int
					v9 = int(in.Int())
					(out.Accuracy)[key] = v9
					in.WantComma()
				}
				in.Delim('}')
			}
		case "TotalLocations":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.TotalLocations = make(map[string]int)
				} else {
					out.TotalLocations = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v10 int
					v10 = int(in.Int())
					(out.TotalLocations)[key] = v10
					in.WantComma()
				}
				in.Delim('}')
			}
		case "CorrectLocations":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.CorrectLocations = make(map[string]int)
				} else {
					out.CorrectLocations = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v11 int
					v11 = int(in.Int())
					(out.CorrectLocations)[key] = v11
					in.WantComma()
				}
				in.Delim('}')
			}
		case "Guess":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Guess = make(map[string]map[string]int)
				} else {
					out.Guess = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v12 map[string]int
					if in.IsNull() {
						in.Skip()
					} else {
						in.Delim('{')
						if !in.IsDelim('}') {
							v12 = make(map[string]int)
						} else {
							v12 = nil
						}
						for !in.IsDelim('}') {
							key := string(in.String())
							in.WantColon()
							var v13 int
							v13 = int(in.Int())
							(v12)[key] = v13
							in.WantComma()
						}
						in.Delim('}')
					}
					(out.Guess)[key] = v12
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson224c90e0EncodeParsinServerDbmParameters2(out *jwriter.Writer, in ResultsParameters) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Accuracy\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Accuracy == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v14First := true
			for v14Name, v14Value := range in.Accuracy {
				if v14First {
					v14First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v14Name))
				out.RawByte(':')
				out.Int(int(v14Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"TotalLocations\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.TotalLocations == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v15First := true
			for v15Name, v15Value := range in.TotalLocations {
				if v15First {
					v15First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v15Name))
				out.RawByte(':')
				out.Int(int(v15Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"CorrectLocations\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.CorrectLocations == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v16First := true
			for v16Name, v16Value := range in.CorrectLocations {
				if v16First {
					v16First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v16Name))
				out.RawByte(':')
				out.Int(int(v16Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"Guess\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Guess == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v17First := true
			for v17Name, v17Value := range in.Guess {
				if v17First {
					v17First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v17Name))
				out.RawByte(':')
				if v17Value == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
					out.RawString(`null`)
				} else {
					out.RawByte('{')
					v18First := true
					for v18Name, v18Value := range v17Value {
						if v18First {
							v18First = false
						} else {
							out.RawByte(',')
						}
						out.String(string(v18Name))
						out.RawByte(':')
						out.Int(int(v18Value))
					}
					out.RawByte('}')
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ResultsParameters) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson224c90e0EncodeParsinServerDbmParameters2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ResultsParameters) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson224c90e0EncodeParsinServerDbmParameters2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ResultsParameters) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson224c90e0DecodeParsinServerDbmParameters2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ResultsParameters) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson224c90e0DecodeParsinServerDbmParameters2(l, v)
}
func easyjson224c90e0DecodeParsinServerDbmParameters3(in *jlexer.Lexer, out *PriorParameters) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "P":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.P = make(map[string]map[string][]float32)
				} else {
					out.P = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v19 map[string][]float32
					if in.IsNull() {
						in.Skip()
					} else {
						in.Delim('{')
						if !in.IsDelim('}') {
							v19 = make(map[string][]float32)
						} else {
							v19 = nil
						}
						for !in.IsDelim('}') {
							key := string(in.String())
							in.WantColon()
							var v20 []float32
							if in.IsNull() {
								in.Skip()
								v20 = nil
							} else {
								in.Delim('[')
								if v20 == nil {
									if !in.IsDelim(']') {
										v20 = make([]float32, 0, 16)
									} else {
										v20 = []float32{}
									}
								} else {
									v20 = (v20)[:0]
								}
								for !in.IsDelim(']') {
									var v21 float32
									v21 = float32(in.Float32())
									v20 = append(v20, v21)
									in.WantComma()
								}
								in.Delim(']')
							}
							(v19)[key] = v20
							in.WantComma()
						}
						in.Delim('}')
					}
					(out.P)[key] = v19
					in.WantComma()
				}
				in.Delim('}')
			}
		case "NP":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.NP = make(map[string]map[string][]float32)
				} else {
					out.NP = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v22 map[string][]float32
					if in.IsNull() {
						in.Skip()
					} else {
						in.Delim('{')
						if !in.IsDelim('}') {
							v22 = make(map[string][]float32)
						} else {
							v22 = nil
						}
						for !in.IsDelim('}') {
							key := string(in.String())
							in.WantColon()
							var v23 []float32
							if in.IsNull() {
								in.Skip()
								v23 = nil
							} else {
								in.Delim('[')
								if v23 == nil {
									if !in.IsDelim(']') {
										v23 = make([]float32, 0, 16)
									} else {
										v23 = []float32{}
									}
								} else {
									v23 = (v23)[:0]
								}
								for !in.IsDelim(']') {
									var v24 float32
									v24 = float32(in.Float32())
									v23 = append(v23, v24)
									in.WantComma()
								}
								in.Delim(']')
							}
							(v22)[key] = v23
							in.WantComma()
						}
						in.Delim('}')
					}
					(out.NP)[key] = v22
					in.WantComma()
				}
				in.Delim('}')
			}
		case "MacFreq":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.MacFreq = make(map[string]map[string]float32)
				} else {
					out.MacFreq = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v25 map[string]float32
					if in.IsNull() {
						in.Skip()
					} else {
						in.Delim('{')
						if !in.IsDelim('}') {
							v25 = make(map[string]float32)
						} else {
							v25 = nil
						}
						for !in.IsDelim('}') {
							key := string(in.String())
							in.WantColon()
							var v26 float32
							v26 = float32(in.Float32())
							(v25)[key] = v26
							in.WantComma()
						}
						in.Delim('}')
					}
					(out.MacFreq)[key] = v25
					in.WantComma()
				}
				in.Delim('}')
			}
		case "NMacFreq":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.NMacFreq = make(map[string]map[string]float32)
				} else {
					out.NMacFreq = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v27 map[string]float32
					if in.IsNull() {
						in.Skip()
					} else {
						in.Delim('{')
						if !in.IsDelim('}') {
							v27 = make(map[string]float32)
						} else {
							v27 = nil
						}
						for !in.IsDelim('}') {
							key := string(in.String())
							in.WantColon()
							var v28 float32
							v28 = float32(in.Float32())
							(v27)[key] = v28
							in.WantComma()
						}
						in.Delim('}')
					}
					(out.NMacFreq)[key] = v27
					in.WantComma()
				}
				in.Delim('}')
			}
		case "Special":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Special = make(map[string]float64)
				} else {
					out.Special = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v29 float64
					v29 = float64(in.Float64())
					(out.Special)[key] = v29
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson224c90e0EncodeParsinServerDbmParameters3(out *jwriter.Writer, in PriorParameters) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"P\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.P == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v30First := true
			for v30Name, v30Value := range in.P {
				if v30First {
					v30First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v30Name))
				out.RawByte(':')
				if v30Value == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
					out.RawString(`null`)
				} else {
					out.RawByte('{')
					v31First := true
					for v31Name, v31Value := range v30Value {
						if v31First {
							v31First = false
						} else {
							out.RawByte(',')
						}
						out.String(string(v31Name))
						out.RawByte(':')
						if v31Value == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
							out.RawString("null")
						} else {
							out.RawByte('[')
							for v32, v33 := range v31Value {
								if v32 > 0 {
									out.RawByte(',')
								}
								out.Float32(float32(v33))
							}
							out.RawByte(']')
						}
					}
					out.RawByte('}')
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"NP\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.NP == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v34First := true
			for v34Name, v34Value := range in.NP {
				if v34First {
					v34First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v34Name))
				out.RawByte(':')
				if v34Value == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
					out.RawString(`null`)
				} else {
					out.RawByte('{')
					v35First := true
					for v35Name, v35Value := range v34Value {
						if v35First {
							v35First = false
						} else {
							out.RawByte(',')
						}
						out.String(string(v35Name))
						out.RawByte(':')
						if v35Value == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
							out.RawString("null")
						} else {
							out.RawByte('[')
							for v36, v37 := range v35Value {
								if v36 > 0 {
									out.RawByte(',')
								}
								out.Float32(float32(v37))
							}
							out.RawByte(']')
						}
					}
					out.RawByte('}')
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"MacFreq\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.MacFreq == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v38First := true
			for v38Name, v38Value := range in.MacFreq {
				if v38First {
					v38First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v38Name))
				out.RawByte(':')
				if v38Value == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
					out.RawString(`null`)
				} else {
					out.RawByte('{')
					v39First := true
					for v39Name, v39Value := range v38Value {
						if v39First {
							v39First = false
						} else {
							out.RawByte(',')
						}
						out.String(string(v39Name))
						out.RawByte(':')
						out.Float32(float32(v39Value))
					}
					out.RawByte('}')
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"NMacFreq\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.NMacFreq == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v40First := true
			for v40Name, v40Value := range in.NMacFreq {
				if v40First {
					v40First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v40Name))
				out.RawByte(':')
				if v40Value == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
					out.RawString(`null`)
				} else {
					out.RawByte('{')
					v41First := true
					for v41Name, v41Value := range v40Value {
						if v41First {
							v41First = false
						} else {
							out.RawByte(',')
						}
						out.String(string(v41Name))
						out.RawByte(':')
						out.Float32(float32(v41Value))
					}
					out.RawByte('}')
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"Special\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Special == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v42First := true
			for v42Name, v42Value := range in.Special {
				if v42First {
					v42First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v42Name))
				out.RawByte(':')
				out.Float64(float64(v42Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PriorParameters) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson224c90e0EncodeParsinServerDbmParameters3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PriorParameters) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson224c90e0EncodeParsinServerDbmParameters3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PriorParameters) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson224c90e0DecodeParsinServerDbmParameters3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PriorParameters) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson224c90e0DecodeParsinServerDbmParameters3(l, v)
}
func easyjson224c90e0DecodeParsinServerDbmParameters4(in *jlexer.Lexer, out *KnnHyperParameters) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "K":
			out.K = int(in.Int())
		case "MinClusterRss":
			out.MinClusterRss = int(in.Int())
		case "MaxEuclideanRssDist":
			out.MaxEuclideanRssDist = int(in.Int())
		case "MaxMovement":
			out.MaxMovement = int(in.Int())
		case "GraphFactors":
			if in.IsNull() {
				in.Skip()
				out.GraphFactors = nil
			} else {
				in.Delim('[')
				if out.GraphFactors == nil {
					if !in.IsDelim(']') {
						out.GraphFactors = make([]float64, 0, 8)
					} else {
						out.GraphFactors = []float64{}
					}
				} else {
					out.GraphFactors = (out.GraphFactors)[:0]
				}
				for !in.IsDelim(']') {
					var v43 float64
					v43 = float64(in.Float64())
					out.GraphFactors = append(out.GraphFactors, v43)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "BLEFactor":
			out.BLEFactor = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson224c90e0EncodeParsinServerDbmParameters4(out *jwriter.Writer, in KnnHyperParameters) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"K\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.K))
	}
	{
		const prefix string = ",\"MinClusterRss\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.MinClusterRss))
	}
	{
		const prefix string = ",\"MaxEuclideanRssDist\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.MaxEuclideanRssDist))
	}
	{
		const prefix string = ",\"MaxMovement\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.MaxMovement))
	}
	{
		const prefix string = ",\"GraphFactors\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.GraphFactors == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v44, v45 := range in.GraphFactors {
				if v44 > 0 {
					out.RawByte(',')
				}
				out.Float64(float64(v45))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"BLEFactor\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.BLEFactor))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v KnnHyperParameters) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson224c90e0EncodeParsinServerDbmParameters4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v KnnHyperParameters) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson224c90e0EncodeParsinServerDbmParameters4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *KnnHyperParameters) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson224c90e0DecodeParsinServerDbmParameters4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *KnnHyperParameters) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson224c90e0DecodeParsinServerDbmParameters4(l, v)
}
func easyjson224c90e0DecodeParsinServerDbmParameters5(in *jlexer.Lexer, out *KnnFingerprints) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "FingerprintsInMemory":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.FingerprintsInMemory = make(map[string]Fingerprint)
				} else {
					out.FingerprintsInMemory = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v46 Fingerprint
					(v46).UnmarshalEasyJSON(in)
					(out.FingerprintsInMemory)[key] = v46
					in.WantComma()
				}
				in.Delim('}')
			}
		case "FingerprintsOrdering":
			if in.IsNull() {
				in.Skip()
				out.FingerprintsOrdering = nil
			} else {
				in.Delim('[')
				if out.FingerprintsOrdering == nil {
					if !in.IsDelim(']') {
						out.FingerprintsOrdering = make([]string, 0, 4)
					} else {
						out.FingerprintsOrdering = []string{}
					}
				} else {
					out.FingerprintsOrdering = (out.FingerprintsOrdering)[:0]
				}
				for !in.IsDelim(']') {
					var v47 string
					v47 = string(in.String())
					out.FingerprintsOrdering = append(out.FingerprintsOrdering, v47)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Clusters":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Clusters = make(map[string][]string)
				} else {
					out.Clusters = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v48 []string
					if in.IsNull() {
						in.Skip()
						v48 = nil
					} else {
						in.Delim('[')
						if v48 == nil {
							if !in.IsDelim(']') {
								v48 = make([]string, 0, 4)
							} else {
								v48 = []string{}
							}
						} else {
							v48 = (v48)[:0]
						}
						for !in.IsDelim(']') {
							var v49 string
							v49 = string(in.String())
							v48 = append(v48, v49)
							in.WantComma()
						}
						in.Delim(']')
					}
					(out.Clusters)[key] = v48
					in.WantComma()
				}
				in.Delim('}')
			}
		case "HyperParameters":
			(out.HyperParameters).UnmarshalEasyJSON(in)
		case "Node2FPs":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Node2FPs = make(map[string][]string)
				} else {
					out.Node2FPs = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v50 []string
					if in.IsNull() {
						in.Skip()
						v50 = nil
					} else {
						in.Delim('[')
						if v50 == nil {
							if !in.IsDelim(']') {
								v50 = make([]string, 0, 4)
							} else {
								v50 = []string{}
							}
						} else {
							v50 = (v50)[:0]
						}
						for !in.IsDelim(']') {
							var v51 string
							v51 = string(in.String())
							v50 = append(v50, v51)
							in.WantComma()
						}
						in.Delim(']')
					}
					(out.Node2FPs)[key] = v50
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson224c90e0EncodeParsinServerDbmParameters5(out *jwriter.Writer, in KnnFingerprints) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"FingerprintsInMemory\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.FingerprintsInMemory == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v52First := true
			for v52Name, v52Value := range in.FingerprintsInMemory {
				if v52First {
					v52First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v52Name))
				out.RawByte(':')
				(v52Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"FingerprintsOrdering\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.FingerprintsOrdering == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v53, v54 := range in.FingerprintsOrdering {
				if v53 > 0 {
					out.RawByte(',')
				}
				out.String(string(v54))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Clusters\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Clusters == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v55First := true
			for v55Name, v55Value := range in.Clusters {
				if v55First {
					v55First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v55Name))
				out.RawByte(':')
				if v55Value == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v56, v57 := range v55Value {
						if v56 > 0 {
							out.RawByte(',')
						}
						out.String(string(v57))
					}
					out.RawByte(']')
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"HyperParameters\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.HyperParameters).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"Node2FPs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Node2FPs == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v58First := true
			for v58Name, v58Value := range in.Node2FPs {
				if v58First {
					v58First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v58Name))
				out.RawByte(':')
				if v58Value == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v59, v60 := range v58Value {
						if v59 > 0 {
							out.RawByte(',')
						}
						out.String(string(v60))
					}
					out.RawByte(']')
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v KnnFingerprints) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson224c90e0EncodeParsinServerDbmParameters5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v KnnFingerprints) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson224c90e0EncodeParsinServerDbmParameters5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *KnnFingerprints) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson224c90e0DecodeParsinServerDbmParameters5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *KnnFingerprints) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson224c90e0DecodeParsinServerDbmParameters5(l, v)
}
func easyjson224c90e0DecodeParsinServerDbmParameters6(in *jlexer.Lexer, out *KnnConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "KRange":
			if in.IsNull() {
				in.Skip()
				out.KRange = nil
			} else {
				in.Delim('[')
				if out.KRange == nil {
					if !in.IsDelim(']') {
						out.KRange = make([]int, 0, 8)
					} else {
						out.KRange = []int{}
					}
				} else {
					out.KRange = (out.KRange)[:0]
				}
				for !in.IsDelim(']') {
					var v61 int
					v61 = int(in.Int())
					out.KRange = append(out.KRange, v61)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "MinClusterRssRange":
			if in.IsNull() {
				in.Skip()
				out.MinClusterRssRange = nil
			} else {
				in.Delim('[')
				if out.MinClusterRssRange == nil {
					if !in.IsDelim(']') {
						out.MinClusterRssRange = make([]int, 0, 8)
					} else {
						out.MinClusterRssRange = []int{}
					}
				} else {
					out.MinClusterRssRange = (out.MinClusterRssRange)[:0]
				}
				for !in.IsDelim(']') {
					var v62 int
					v62 = int(in.Int())
					out.MinClusterRssRange = append(out.MinClusterRssRange, v62)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "MaxEuclideanRssDistRange":
			if in.IsNull() {
				in.Skip()
				out.MaxEuclideanRssDistRange = nil
			} else {
				in.Delim('[')
				if out.MaxEuclideanRssDistRange == nil {
					if !in.IsDelim(']') {
						out.MaxEuclideanRssDistRange = make([]int, 0, 8)
					} else {
						out.MaxEuclideanRssDistRange = []int{}
					}
				} else {
					out.MaxEuclideanRssDistRange = (out.MaxEuclideanRssDistRange)[:0]
				}
				for !in.IsDelim(']') {
					var v63 int
					v63 = int(in.Int())
					out.MaxEuclideanRssDistRange = append(out.MaxEuclideanRssDistRange, v63)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "GraphEnabled":
			out.GraphEnabled = bool(in.Bool())
		case "GraphFactorRange":
			if in.IsNull() {
				in.Skip()
				out.GraphFactorRange = nil
			} else {
				in.Delim('[')
				if out.GraphFactorRange == nil {
					if !in.IsDelim(']') {
						out.GraphFactorRange = make([][]float64, 0, 2)
					} else {
						out.GraphFactorRange = [][]float64{}
					}
				} else {
					out.GraphFactorRange = (out.GraphFactorRange)[:0]
				}
				for !in.IsDelim(']') {
					var v64 []float64
					if in.IsNull() {
						in.Skip()
						v64 = nil
					} else {
						in.Delim('[')
						if v64 == nil {
							if !in.IsDelim(']') {
								v64 = make([]float64, 0, 8)
							} else {
								v64 = []float64{}
							}
						} else {
							v64 = (v64)[:0]
						}
						for !in.IsDelim(']') {
							var v65 float64
							v65 = float64(in.Float64())
							v64 = append(v64, v65)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.GraphFactorRange = append(out.GraphFactorRange, v64)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "DSAEnabled":
			out.DSAEnabled = bool(in.Bool())
		case "MaxMovementRange":
			if in.IsNull() {
				in.Skip()
				out.MaxMovementRange = nil
			} else {
				in.Delim('[')
				if out.MaxMovementRange == nil {
					if !in.IsDelim(']') {
						out.MaxMovementRange = make([]int, 0, 8)
					} else {
						out.MaxMovementRange = []int{}
					}
				} else {
					out.MaxMovementRange = (out.MaxMovementRange)[:0]
				}
				for !in.IsDelim(']') {
					var v66 int
					v66 = int(in.Int())
					out.MaxMovementRange = append(out.MaxMovementRange, v66)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "BLEFactorRange":
			if in.IsNull() {
				in.Skip()
				out.BLEFactorRange = nil
			} else {
				in.Delim('[')
				if out.BLEFactorRange == nil {
					if !in.IsDelim(']') {
						out.BLEFactorRange = make([]float64, 0, 8)
					} else {
						out.BLEFactorRange = []float64{}
					}
				} else {
					out.BLEFactorRange = (out.BLEFactorRange)[:0]
				}
				for !in.IsDelim(']') {
					var v67 float64
					v67 = float64(in.Float64())
					out.BLEFactorRange = append(out.BLEFactorRange, v67)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson224c90e0EncodeParsinServerDbmParameters6(out *jwriter.Writer, in KnnConfig) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"KRange\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.KRange == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v68, v69 := range in.KRange {
				if v68 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v69))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"MinClusterRssRange\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.MinClusterRssRange == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v70, v71 := range in.MinClusterRssRange {
				if v70 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v71))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"MaxEuclideanRssDistRange\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.MaxEuclideanRssDistRange == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v72, v73 := range in.MaxEuclideanRssDistRange {
				if v72 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v73))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"GraphEnabled\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.GraphEnabled))
	}
	{
		const prefix string = ",\"GraphFactorRange\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.GraphFactorRange == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v74, v75 := range in.GraphFactorRange {
				if v74 > 0 {
					out.RawByte(',')
				}
				if v75 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v76, v77 := range v75 {
						if v76 > 0 {
							out.RawByte(',')
						}
						out.Float64(float64(v77))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"DSAEnabled\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.DSAEnabled))
	}
	{
		const prefix string = ",\"MaxMovementRange\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.MaxMovementRange == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v78, v79 := range in.MaxMovementRange {
				if v78 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v79))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"BLEFactorRange\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.BLEFactorRange == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v80, v81 := range in.BLEFactorRange {
				if v80 > 0 {
					out.RawByte(',')
				}
				out.Float64(float64(v81))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v KnnConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson224c90e0EncodeParsinServerDbmParameters6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v KnnConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson224c90e0EncodeParsinServerDbmParameters6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *KnnConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson224c90e0DecodeParsinServerDbmParameters6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *KnnConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson224c90e0DecodeParsinServerDbmParameters6(l, v)
}
func easyjson224c90e0DecodeParsinServerDbmParameters7(in *jlexer.Lexer, out *FilterMacs) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "group":
			out.Group = string(in.String())
		case "macs":
			if in.IsNull() {
				in.Skip()
				out.Macs = nil
			} else {
				in.Delim('[')
				if out.Macs == nil {
					if !in.IsDelim(']') {
						out.Macs = make([]string, 0, 4)
					} else {
						out.Macs = []string{}
					}
				} else {
					out.Macs = (out.Macs)[:0]
				}
				for !in.IsDelim(']') {
					var v82 string
					v82 = string(in.String())
					out.Macs = append(out.Macs, v82)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson224c90e0EncodeParsinServerDbmParameters7(out *jwriter.Writer, in FilterMacs) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"group\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Group))
	}
	{
		const prefix string = ",\"macs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Macs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v83, v84 := range in.Macs {
				if v83 > 0 {
					out.RawByte(',')
				}
				out.String(string(v84))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FilterMacs) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson224c90e0EncodeParsinServerDbmParameters7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FilterMacs) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson224c90e0EncodeParsinServerDbmParameters7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FilterMacs) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson224c90e0DecodeParsinServerDbmParameters7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FilterMacs) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson224c90e0DecodeParsinServerDbmParameters7(l, v)
}
