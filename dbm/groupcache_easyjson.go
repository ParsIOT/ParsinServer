// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package dbm

import (
	parameters "ParsinServer/algorithms/parameters"
	glb "ParsinServer/glb"
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	sync "sync"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson3b8810b5DecodeParsinServerDbm(in *jlexer.Lexer, out *ResultDataStruct) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Results":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Results = make(map[string]parameters.Fingerprint)
				} else {
					out.Results = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 parameters.Fingerprint
					(v1).UnmarshalEasyJSON(in)
					(out.Results)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		case "AlgoAccuracy":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.AlgoAccuracy = make(map[string]int)
				} else {
					out.AlgoAccuracy = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v2 int
					v2 = int(in.Int())
					(out.AlgoAccuracy)[key] = v2
					in.WantComma()
				}
				in.Delim('}')
			}
		case "AlgoAccuracyLoc":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.AlgoAccuracyLoc = make(map[string]map[string]int)
				} else {
					out.AlgoAccuracyLoc = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v3 map[string]int
					if in.IsNull() {
						in.Skip()
					} else {
						in.Delim('{')
						if !in.IsDelim('}') {
							v3 = make(map[string]int)
						} else {
							v3 = nil
						}
						for !in.IsDelim('}') {
							key := string(in.String())
							in.WantColon()
							var v4 int
							v4 = int(in.Int())
							(v3)[key] = v4
							in.WantComma()
						}
						in.Delim('}')
					}
					(out.AlgoAccuracyLoc)[key] = v3
					in.WantComma()
				}
				in.Delim('}')
			}
		case "UserHistory":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.UserHistory = make(map[string][]glb.UserPositionJSON)
				} else {
					out.UserHistory = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v5 []glb.UserPositionJSON
					if in.IsNull() {
						in.Skip()
						v5 = nil
					} else {
						in.Delim('[')
						if v5 == nil {
							if !in.IsDelim(']') {
								v5 = make([]glb.UserPositionJSON, 0, 1)
							} else {
								v5 = []glb.UserPositionJSON{}
							}
						} else {
							v5 = (v5)[:0]
						}
						for !in.IsDelim(']') {
							var v6 glb.UserPositionJSON
							easyjson3b8810b5DecodeParsinServerGlb(in, &v6)
							v5 = append(v5, v6)
							in.WantComma()
						}
						in.Delim(']')
					}
					(out.UserHistory)[key] = v5
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3b8810b5EncodeParsinServerDbm(out *jwriter.Writer, in ResultDataStruct) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Results\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Results == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v7First := true
			for v7Name, v7Value := range in.Results {
				if v7First {
					v7First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v7Name))
				out.RawByte(':')
				(v7Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"AlgoAccuracy\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.AlgoAccuracy == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v8First := true
			for v8Name, v8Value := range in.AlgoAccuracy {
				if v8First {
					v8First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v8Name))
				out.RawByte(':')
				out.Int(int(v8Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"AlgoAccuracyLoc\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.AlgoAccuracyLoc == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v9First := true
			for v9Name, v9Value := range in.AlgoAccuracyLoc {
				if v9First {
					v9First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v9Name))
				out.RawByte(':')
				if v9Value == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
					out.RawString(`null`)
				} else {
					out.RawByte('{')
					v10First := true
					for v10Name, v10Value := range v9Value {
						if v10First {
							v10First = false
						} else {
							out.RawByte(',')
						}
						out.String(string(v10Name))
						out.RawByte(':')
						out.Int(int(v10Value))
					}
					out.RawByte('}')
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"UserHistory\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.UserHistory == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v11First := true
			for v11Name, v11Value := range in.UserHistory {
				if v11First {
					v11First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v11Name))
				out.RawByte(':')
				if v11Value == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v12, v13 := range v11Value {
						if v12 > 0 {
							out.RawByte(',')
						}
						easyjson3b8810b5EncodeParsinServerGlb(out, v13)
					}
					out.RawByte(']')
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ResultDataStruct) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3b8810b5EncodeParsinServerDbm(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ResultDataStruct) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3b8810b5EncodeParsinServerDbm(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ResultDataStruct) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3b8810b5DecodeParsinServerDbm(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ResultDataStruct) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3b8810b5DecodeParsinServerDbm(l, v)
}
func easyjson3b8810b5DecodeParsinServerGlb(in *jlexer.Lexer, out *glb.UserPositionJSON) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "time":
			out.Time = int64(in.Int64())
		case "bayesguess":
			out.BayesGuess = string(in.String())
		case "bayesdata":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.BayesData = make(map[string]float64)
				} else {
					out.BayesData = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v14 float64
					v14 = float64(in.Float64())
					(out.BayesData)[key] = v14
					in.WantComma()
				}
				in.Delim('}')
			}
		case "svmguess":
			out.SvmGuess = string(in.String())
		case "svmdata":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.SvmData = make(map[string]float64)
				} else {
					out.SvmData = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v15 float64
					v15 = float64(in.Float64())
					(out.SvmData)[key] = v15
					in.WantComma()
				}
				in.Delim('}')
			}
		case "rfdata":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.ScikitData = make(map[string]string)
				} else {
					out.ScikitData = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v16 string
					v16 = string(in.String())
					(out.ScikitData)[key] = v16
					in.WantComma()
				}
				in.Delim('}')
			}
		case "knnguess":
			out.KnnGuess = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3b8810b5EncodeParsinServerGlb(out *jwriter.Writer, in glb.UserPositionJSON) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"time\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Time))
	}
	{
		const prefix string = ",\"bayesguess\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BayesGuess))
	}
	{
		const prefix string = ",\"bayesdata\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.BayesData == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v17First := true
			for v17Name, v17Value := range in.BayesData {
				if v17First {
					v17First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v17Name))
				out.RawByte(':')
				out.Float64(float64(v17Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"svmguess\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SvmGuess))
	}
	{
		const prefix string = ",\"svmdata\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.SvmData == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v18First := true
			for v18Name, v18Value := range in.SvmData {
				if v18First {
					v18First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v18Name))
				out.RawByte(':')
				out.Float64(float64(v18Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"rfdata\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.ScikitData == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v19First := true
			for v19Name, v19Value := range in.ScikitData {
				if v19First {
					v19First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v19Name))
				out.RawByte(':')
				out.String(string(v19Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"knnguess\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.KnnGuess))
	}
	out.RawByte('}')
}
func easyjson3b8810b5DecodeParsinServerDbm1(in *jlexer.Lexer, out *RawDataStruct) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Fingerprints":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Fingerprints = make(map[string]parameters.Fingerprint)
				} else {
					out.Fingerprints = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v20 parameters.Fingerprint
					(v20).UnmarshalEasyJSON(in)
					(out.Fingerprints)[key] = v20
					in.WantComma()
				}
				in.Delim('}')
			}
		case "FingerprintsOrdering":
			if in.IsNull() {
				in.Skip()
				out.FingerprintsOrdering = nil
			} else {
				in.Delim('[')
				if out.FingerprintsOrdering == nil {
					if !in.IsDelim(']') {
						out.FingerprintsOrdering = make([]string, 0, 4)
					} else {
						out.FingerprintsOrdering = []string{}
					}
				} else {
					out.FingerprintsOrdering = (out.FingerprintsOrdering)[:0]
				}
				for !in.IsDelim(']') {
					var v21 string
					v21 = string(in.String())
					out.FingerprintsOrdering = append(out.FingerprintsOrdering, v21)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3b8810b5EncodeParsinServerDbm1(out *jwriter.Writer, in RawDataStruct) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Fingerprints\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Fingerprints == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v22First := true
			for v22Name, v22Value := range in.Fingerprints {
				if v22First {
					v22First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v22Name))
				out.RawByte(':')
				(v22Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"FingerprintsOrdering\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.FingerprintsOrdering == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v23, v24 := range in.FingerprintsOrdering {
				if v23 > 0 {
					out.RawByte(',')
				}
				out.String(string(v24))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RawDataStruct) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3b8810b5EncodeParsinServerDbm1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RawDataStruct) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3b8810b5EncodeParsinServerDbm1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RawDataStruct) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3b8810b5DecodeParsinServerDbm1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RawDataStruct) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3b8810b5DecodeParsinServerDbm1(l, v)
}
func easyjson3b8810b5DecodeParsinServerDbm2(in *jlexer.Lexer, out *MiddleDataStruct) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "NetworkMacs":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.NetworkMacs = make(map[string]map[string]bool)
				} else {
					out.NetworkMacs = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v25 map[string]bool
					if in.IsNull() {
						in.Skip()
					} else {
						in.Delim('{')
						if !in.IsDelim('}') {
							v25 = make(map[string]bool)
						} else {
							v25 = nil
						}
						for !in.IsDelim('}') {
							key := string(in.String())
							in.WantColon()
							var v26 bool
							v26 = bool(in.Bool())
							(v25)[key] = v26
							in.WantComma()
						}
						in.Delim('}')
					}
					(out.NetworkMacs)[key] = v25
					in.WantComma()
				}
				in.Delim('}')
			}
		case "NetworkLocs":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.NetworkLocs = make(map[string]map[string]bool)
				} else {
					out.NetworkLocs = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v27 map[string]bool
					if in.IsNull() {
						in.Skip()
					} else {
						in.Delim('{')
						if !in.IsDelim('}') {
							v27 = make(map[string]bool)
						} else {
							v27 = nil
						}
						for !in.IsDelim('}') {
							key := string(in.String())
							in.WantColon()
							var v28 bool
							v28 = bool(in.Bool())
							(v27)[key] = v28
							in.WantComma()
						}
						in.Delim('}')
					}
					(out.NetworkLocs)[key] = v27
					in.WantComma()
				}
				in.Delim('}')
			}
		case "MacVariability":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.MacVariability = make(map[string]float32)
				} else {
					out.MacVariability = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v29 float32
					v29 = float32(in.Float32())
					(out.MacVariability)[key] = v29
					in.WantComma()
				}
				in.Delim('}')
			}
		case "MacCount":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.MacCount = make(map[string]int)
				} else {
					out.MacCount = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v30 int
					v30 = int(in.Int())
					(out.MacCount)[key] = v30
					in.WantComma()
				}
				in.Delim('}')
			}
		case "MacCountByLoc":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.MacCountByLoc = make(map[string]map[string]int)
				} else {
					out.MacCountByLoc = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v31 map[string]int
					if in.IsNull() {
						in.Skip()
					} else {
						in.Delim('{')
						if !in.IsDelim('}') {
							v31 = make(map[string]int)
						} else {
							v31 = nil
						}
						for !in.IsDelim('}') {
							key := string(in.String())
							in.WantColon()
							var v32 int
							v32 = int(in.Int())
							(v31)[key] = v32
							in.WantComma()
						}
						in.Delim('}')
					}
					(out.MacCountByLoc)[key] = v31
					in.WantComma()
				}
				in.Delim('}')
			}
		case "UniqueLocs":
			if in.IsNull() {
				in.Skip()
				out.UniqueLocs = nil
			} else {
				in.Delim('[')
				if out.UniqueLocs == nil {
					if !in.IsDelim(']') {
						out.UniqueLocs = make([]string, 0, 4)
					} else {
						out.UniqueLocs = []string{}
					}
				} else {
					out.UniqueLocs = (out.UniqueLocs)[:0]
				}
				for !in.IsDelim(']') {
					var v33 string
					v33 = string(in.String())
					out.UniqueLocs = append(out.UniqueLocs, v33)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "UniqueMacs":
			if in.IsNull() {
				in.Skip()
				out.UniqueMacs = nil
			} else {
				in.Delim('[')
				if out.UniqueMacs == nil {
					if !in.IsDelim(']') {
						out.UniqueMacs = make([]string, 0, 4)
					} else {
						out.UniqueMacs = []string{}
					}
				} else {
					out.UniqueMacs = (out.UniqueMacs)[:0]
				}
				for !in.IsDelim(']') {
					var v34 string
					v34 = string(in.String())
					out.UniqueMacs = append(out.UniqueMacs, v34)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "LocCount":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.LocCount = make(map[string]int)
				} else {
					out.LocCount = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v35 int
					v35 = int(in.Int())
					(out.LocCount)[key] = v35
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3b8810b5EncodeParsinServerDbm2(out *jwriter.Writer, in MiddleDataStruct) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"NetworkMacs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.NetworkMacs == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v36First := true
			for v36Name, v36Value := range in.NetworkMacs {
				if v36First {
					v36First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v36Name))
				out.RawByte(':')
				if v36Value == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
					out.RawString(`null`)
				} else {
					out.RawByte('{')
					v37First := true
					for v37Name, v37Value := range v36Value {
						if v37First {
							v37First = false
						} else {
							out.RawByte(',')
						}
						out.String(string(v37Name))
						out.RawByte(':')
						out.Bool(bool(v37Value))
					}
					out.RawByte('}')
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"NetworkLocs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.NetworkLocs == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v38First := true
			for v38Name, v38Value := range in.NetworkLocs {
				if v38First {
					v38First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v38Name))
				out.RawByte(':')
				if v38Value == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
					out.RawString(`null`)
				} else {
					out.RawByte('{')
					v39First := true
					for v39Name, v39Value := range v38Value {
						if v39First {
							v39First = false
						} else {
							out.RawByte(',')
						}
						out.String(string(v39Name))
						out.RawByte(':')
						out.Bool(bool(v39Value))
					}
					out.RawByte('}')
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"MacVariability\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.MacVariability == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v40First := true
			for v40Name, v40Value := range in.MacVariability {
				if v40First {
					v40First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v40Name))
				out.RawByte(':')
				out.Float32(float32(v40Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"MacCount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.MacCount == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v41First := true
			for v41Name, v41Value := range in.MacCount {
				if v41First {
					v41First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v41Name))
				out.RawByte(':')
				out.Int(int(v41Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"MacCountByLoc\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.MacCountByLoc == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v42First := true
			for v42Name, v42Value := range in.MacCountByLoc {
				if v42First {
					v42First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v42Name))
				out.RawByte(':')
				if v42Value == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
					out.RawString(`null`)
				} else {
					out.RawByte('{')
					v43First := true
					for v43Name, v43Value := range v42Value {
						if v43First {
							v43First = false
						} else {
							out.RawByte(',')
						}
						out.String(string(v43Name))
						out.RawByte(':')
						out.Int(int(v43Value))
					}
					out.RawByte('}')
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"UniqueLocs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.UniqueLocs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v44, v45 := range in.UniqueLocs {
				if v44 > 0 {
					out.RawByte(',')
				}
				out.String(string(v45))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"UniqueMacs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.UniqueMacs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v46, v47 := range in.UniqueMacs {
				if v46 > 0 {
					out.RawByte(',')
				}
				out.String(string(v47))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"LocCount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.LocCount == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v48First := true
			for v48Name, v48Value := range in.LocCount {
				if v48First {
					v48First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v48Name))
				out.RawByte(':')
				out.Int(int(v48Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MiddleDataStruct) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3b8810b5EncodeParsinServerDbm2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MiddleDataStruct) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3b8810b5EncodeParsinServerDbm2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MiddleDataStruct) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3b8810b5DecodeParsinServerDbm2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MiddleDataStruct) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3b8810b5DecodeParsinServerDbm2(l, v)
}
func easyjson3b8810b5DecodeParsinServerDbm3(in *jlexer.Lexer, out *GroupManger) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3b8810b5EncodeParsinServerDbm3(out *jwriter.Writer, in GroupManger) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GroupManger) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3b8810b5EncodeParsinServerDbm3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GroupManger) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3b8810b5EncodeParsinServerDbm3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GroupManger) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3b8810b5DecodeParsinServerDbm3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GroupManger) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3b8810b5DecodeParsinServerDbm3(l, v)
}
func easyjson3b8810b5DecodeParsinServerDbm4(in *jlexer.Lexer, out *Group) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "GMutex":
			if in.IsNull() {
				in.Skip()
				out.GMutex = nil
			} else {
				if out.GMutex == nil {
					out.GMutex = new(sync.RWMutex)
				}
				easyjson3b8810b5DecodeSync(in, &*out.GMutex)
			}
		case "Name":
			out.Name = string(in.String())
		case "Permanent":
			out.Permanent = bool(in.Bool())
		case "RawData":
			if in.IsNull() {
				in.Skip()
				out.RawData = nil
			} else {
				if out.RawData == nil {
					out.RawData = new(RawDataStruct)
				}
				(*out.RawData).UnmarshalEasyJSON(in)
			}
		case "MiddleData":
			if in.IsNull() {
				in.Skip()
				out.MiddleData = nil
			} else {
				if out.MiddleData == nil {
					out.MiddleData = new(MiddleDataStruct)
				}
				(*out.MiddleData).UnmarshalEasyJSON(in)
			}
		case "AlgoData":
			if in.IsNull() {
				in.Skip()
				out.AlgoData = nil
			} else {
				if out.AlgoData == nil {
					out.AlgoData = new(AlgoDataStruct)
				}
				(*out.AlgoData).UnmarshalEasyJSON(in)
			}
		case "ResultData":
			if in.IsNull() {
				in.Skip()
				out.ResultData = nil
			} else {
				if out.ResultData == nil {
					out.ResultData = new(ResultDataStruct)
				}
				(*out.ResultData).UnmarshalEasyJSON(in)
			}
		case "RawDataChanged":
			out.RawDataChanged = bool(in.Bool())
		case "MiddleDataChanged":
			out.MiddleDataChanged = bool(in.Bool())
		case "AlgoDataChanged":
			out.AlgoDataChanged = bool(in.Bool())
		case "ResultDataChanged":
			out.ResultDataChanged = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3b8810b5EncodeParsinServerDbm4(out *jwriter.Writer, in Group) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"GMutex\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.GMutex == nil {
			out.RawString("null")
		} else {
			easyjson3b8810b5EncodeSync(out, *in.GMutex)
		}
	}
	{
		const prefix string = ",\"Name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"Permanent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Permanent))
	}
	{
		const prefix string = ",\"RawData\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.RawData == nil {
			out.RawString("null")
		} else {
			(*in.RawData).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"MiddleData\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.MiddleData == nil {
			out.RawString("null")
		} else {
			(*in.MiddleData).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"AlgoData\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.AlgoData == nil {
			out.RawString("null")
		} else {
			(*in.AlgoData).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"ResultData\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.ResultData == nil {
			out.RawString("null")
		} else {
			(*in.ResultData).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"RawDataChanged\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.RawDataChanged))
	}
	{
		const prefix string = ",\"MiddleDataChanged\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.MiddleDataChanged))
	}
	{
		const prefix string = ",\"AlgoDataChanged\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.AlgoDataChanged))
	}
	{
		const prefix string = ",\"ResultDataChanged\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.ResultDataChanged))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Group) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3b8810b5EncodeParsinServerDbm4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Group) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3b8810b5EncodeParsinServerDbm4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Group) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3b8810b5DecodeParsinServerDbm4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Group) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3b8810b5DecodeParsinServerDbm4(l, v)
}
func easyjson3b8810b5DecodeSync(in *jlexer.Lexer, out *sync.RWMutex) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3b8810b5EncodeSync(out *jwriter.Writer, in sync.RWMutex) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}
func easyjson3b8810b5DecodeParsinServerDbm5(in *jlexer.Lexer, out *AlgoDataStruct) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "KnnFPs":
			(out.KnnFPs).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3b8810b5EncodeParsinServerDbm5(out *jwriter.Writer, in AlgoDataStruct) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"KnnFPs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.KnnFPs).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AlgoDataStruct) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3b8810b5EncodeParsinServerDbm5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AlgoDataStruct) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3b8810b5EncodeParsinServerDbm5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AlgoDataStruct) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3b8810b5DecodeParsinServerDbm5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AlgoDataStruct) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3b8810b5DecodeParsinServerDbm5(l, v)
}
