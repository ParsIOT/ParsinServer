// Code generated by protoc-gen-go. DO NOT EDIT.
// source: particlefilter.proto

/*
Package particlefilterclasses is a generated protocol buffer package.

It is generated from these files:
	particlefilter.proto

It has these top-level messages:
	InitRequest
	InitReply
	PredictRequest
	PredictReply
	UpdateRequest
	UpdateReply
*/
package particlefilterclasses

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Initialization:
type InitRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *InitRequest) Reset()                    { *m = InitRequest{} }
func (m *InitRequest) String() string            { return proto.CompactTextString(m) }
func (*InitRequest) ProtoMessage()               {}
func (*InitRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *InitRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type InitReply struct {
	ReturnValue bool `protobuf:"varint,1,opt,name=returnValue" json:"returnValue,omitempty"`
}

func (m *InitReply) Reset()                    { *m = InitReply{} }
func (m *InitReply) String() string            { return proto.CompactTextString(m) }
func (*InitReply) ProtoMessage()               {}
func (*InitReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *InitReply) GetReturnValue() bool {
	if m != nil {
		return m.ReturnValue
	}
	return false
}

// Predict:
type PredictRequest struct {
	State string `protobuf:"bytes,1,opt,name=state" json:"state,omitempty"`
}

func (m *PredictRequest) Reset()                    { *m = PredictRequest{} }
func (m *PredictRequest) String() string            { return proto.CompactTextString(m) }
func (*PredictRequest) ProtoMessage()               {}
func (*PredictRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *PredictRequest) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

type PredictReply struct {
	ResXY       string `protobuf:"bytes,1,opt,name=resXY" json:"resXY,omitempty"`
	ReturnValue bool   `protobuf:"varint,2,opt,name=returnValue" json:"returnValue,omitempty"`
}

func (m *PredictReply) Reset()                    { *m = PredictReply{} }
func (m *PredictReply) String() string            { return proto.CompactTextString(m) }
func (*PredictReply) ProtoMessage()               {}
func (*PredictReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *PredictReply) GetResXY() string {
	if m != nil {
		return m.ResXY
	}
	return ""
}

func (m *PredictReply) GetReturnValue() bool {
	if m != nil {
		return m.ReturnValue
	}
	return false
}

// Update:
type UpdateRequest struct {
	State       string `protobuf:"bytes,1,opt,name=state" json:"state,omitempty"`
	WiFiPredict string `protobuf:"bytes,2,opt,name=WiFiPredict" json:"WiFiPredict,omitempty"`
}

func (m *UpdateRequest) Reset()                    { *m = UpdateRequest{} }
func (m *UpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateRequest) ProtoMessage()               {}
func (*UpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *UpdateRequest) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *UpdateRequest) GetWiFiPredict() string {
	if m != nil {
		return m.WiFiPredict
	}
	return ""
}

type UpdateReply struct {
	ResXY       string `protobuf:"bytes,1,opt,name=resXY" json:"resXY,omitempty"`
	ReturnValue bool   `protobuf:"varint,2,opt,name=returnValue" json:"returnValue,omitempty"`
}

func (m *UpdateReply) Reset()                    { *m = UpdateReply{} }
func (m *UpdateReply) String() string            { return proto.CompactTextString(m) }
func (*UpdateReply) ProtoMessage()               {}
func (*UpdateReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *UpdateReply) GetResXY() string {
	if m != nil {
		return m.ResXY
	}
	return ""
}

func (m *UpdateReply) GetReturnValue() bool {
	if m != nil {
		return m.ReturnValue
	}
	return false
}

func init() {
	proto.RegisterType((*InitRequest)(nil), "particlefilterclasses.InitRequest")
	proto.RegisterType((*InitReply)(nil), "particlefilterclasses.InitReply")
	proto.RegisterType((*PredictRequest)(nil), "particlefilterclasses.PredictRequest")
	proto.RegisterType((*PredictReply)(nil), "particlefilterclasses.PredictReply")
	proto.RegisterType((*UpdateRequest)(nil), "particlefilterclasses.UpdateRequest")
	proto.RegisterType((*UpdateReply)(nil), "particlefilterclasses.UpdateReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ParticleFilter service

type ParticleFilterClient interface {
	// Initialization
	Initialize(ctx context.Context, in *InitRequest, opts ...grpc.CallOption) (*InitReply, error)
	// Predict
	Predict(ctx context.Context, in *PredictRequest, opts ...grpc.CallOption) (*PredictReply, error)
	// Update
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateReply, error)
}

type particleFilterClient struct {
	cc *grpc.ClientConn
}

func NewParticleFilterClient(cc *grpc.ClientConn) ParticleFilterClient {
	return &particleFilterClient{cc}
}

func (c *particleFilterClient) Initialize(ctx context.Context, in *InitRequest, opts ...grpc.CallOption) (*InitReply, error) {
	out := new(InitReply)
	err := grpc.Invoke(ctx, "/particlefilterclasses.ParticleFilter/Initialize", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *particleFilterClient) Predict(ctx context.Context, in *PredictRequest, opts ...grpc.CallOption) (*PredictReply, error) {
	out := new(PredictReply)
	err := grpc.Invoke(ctx, "/particlefilterclasses.ParticleFilter/Predict", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *particleFilterClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateReply, error) {
	out := new(UpdateReply)
	err := grpc.Invoke(ctx, "/particlefilterclasses.ParticleFilter/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ParticleFilter service

type ParticleFilterServer interface {
	// Initialization
	Initialize(context.Context, *InitRequest) (*InitReply, error)
	// Predict
	Predict(context.Context, *PredictRequest) (*PredictReply, error)
	// Update
	Update(context.Context, *UpdateRequest) (*UpdateReply, error)
}

func RegisterParticleFilterServer(s *grpc.Server, srv ParticleFilterServer) {
	s.RegisterService(&_ParticleFilter_serviceDesc, srv)
}

func _ParticleFilter_Initialize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParticleFilterServer).Initialize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/particlefilterclasses.ParticleFilter/Initialize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParticleFilterServer).Initialize(ctx, req.(*InitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParticleFilter_Predict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PredictRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParticleFilterServer).Predict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/particlefilterclasses.ParticleFilter/Predict",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParticleFilterServer).Predict(ctx, req.(*PredictRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParticleFilter_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParticleFilterServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/particlefilterclasses.ParticleFilter/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParticleFilterServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ParticleFilter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "particlefilterclasses.ParticleFilter",
	HandlerType: (*ParticleFilterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Initialize",
			Handler:    _ParticleFilter_Initialize_Handler,
		},
		{
			MethodName: "Predict",
			Handler:    _ParticleFilter_Predict_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ParticleFilter_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "particlefilter.proto",
}

func init() { proto.RegisterFile("particlefilter.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 309 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x92, 0xbf, 0x4e, 0xc3, 0x30,
	0x10, 0x87, 0x69, 0x45, 0x0b, 0xbd, 0x40, 0x07, 0x13, 0x24, 0x94, 0x85, 0x60, 0xfe, 0x88, 0x85,
	0x0c, 0xb0, 0x30, 0x57, 0x22, 0x88, 0x2d, 0x8a, 0x0a, 0x85, 0xd1, 0xa4, 0x07, 0xb2, 0xe4, 0x26,
	0xc6, 0x76, 0x24, 0xca, 0x7b, 0xf0, 0xbe, 0x28, 0x4e, 0x52, 0x25, 0x85, 0xb6, 0x03, 0x9b, 0x7d,
	0xfa, 0xfc, 0x9d, 0xf5, 0xbb, 0x03, 0x57, 0x32, 0x65, 0x78, 0x22, 0xf0, 0x8d, 0x0b, 0x83, 0x2a,
	0x90, 0x2a, 0x33, 0x19, 0x39, 0x6c, 0x57, 0x13, 0xc1, 0xb4, 0x46, 0x4d, 0x4f, 0xc0, 0x79, 0x48,
	0xb9, 0x89, 0xf1, 0x23, 0x47, 0x6d, 0x08, 0x81, 0xed, 0x94, 0xcd, 0xf0, 0xa8, 0xe3, 0x77, 0x2e,
	0x07, 0xb1, 0x3d, 0xd3, 0x2b, 0x18, 0x94, 0x88, 0x14, 0x73, 0xe2, 0x83, 0xa3, 0xd0, 0xe4, 0x2a,
	0x7d, 0x62, 0x22, 0x2f, 0xb9, 0xdd, 0xb8, 0x59, 0xa2, 0x17, 0x30, 0x8c, 0x14, 0x4e, 0x79, 0xb2,
	0x90, 0xba, 0xd0, 0xd3, 0x86, 0x99, 0xda, 0x5a, 0x5e, 0x68, 0x08, 0x7b, 0x0b, 0xae, 0x30, 0xbb,
	0xd0, 0x53, 0xa8, 0x9f, 0x5f, 0x6a, 0xca, 0x5e, 0x96, 0xfb, 0x75, 0x7f, 0xf7, 0xbb, 0x87, 0xfd,
	0x47, 0x39, 0x65, 0x06, 0xd7, 0xb6, 0x2b, 0x44, 0x13, 0x1e, 0xf2, 0xaa, 0xa5, 0x15, 0x0d, 0xe2,
	0x66, 0x89, 0xde, 0x81, 0x53, 0x8b, 0xfe, 0xf1, 0x9f, 0xeb, 0xef, 0x2e, 0x0c, 0xa3, 0x2a, 0xeb,
	0xd0, 0x66, 0x4d, 0xc6, 0x00, 0x45, 0x82, 0x9c, 0x09, 0xfe, 0x85, 0x84, 0x06, 0x7f, 0x8e, 0x22,
	0x68, 0xcc, 0xc1, 0xf3, 0xd7, 0x32, 0x52, 0xcc, 0xe9, 0x16, 0x99, 0xc0, 0x4e, 0xf5, 0x75, 0x72,
	0xbe, 0x02, 0x6f, 0x0f, 0xc2, 0x3b, 0xdd, 0x84, 0x95, 0xe2, 0x31, 0xf4, 0xcb, 0x20, 0xc8, 0xd9,
	0x8a, 0x07, 0xad, 0xc0, 0x3d, 0xba, 0x81, 0xb2, 0xd6, 0xd1, 0x2d, 0x1c, 0xf3, 0x2c, 0x78, 0x57,
	0x32, 0x09, 0xf0, 0x93, 0xcd, 0xa4, 0x40, 0xbd, 0xf4, 0x6e, 0x74, 0xd0, 0xce, 0x2d, 0x2a, 0x16,
	0x37, 0xea, 0xbc, 0xf6, 0xed, 0x06, 0xdf, 0xfc, 0x04, 0x00, 0x00, 0xff, 0xff, 0xae, 0x47, 0x55,
	0xf0, 0xd9, 0x02, 0x00, 0x00,
}
